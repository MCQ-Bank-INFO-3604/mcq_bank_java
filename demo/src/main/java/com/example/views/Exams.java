/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.example.views;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.awt.event.MouseEvent;
import java.io.File;

import com.example.controllers.CoursesController;
import com.example.controllers.ExamController;
import com.example.controllers.QuestionController;
import com.example.controllers.SubtopicsController;
import com.example.controllers.TopicsController;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author Rian Ramdin
 */
public class Exams extends javax.swing.JPanel {
    private ExamController eController = new ExamController();
    private QuestionController qController = new QuestionController();
    
    private HashMap<String, Integer> courseCodeToIDMap = new HashMap<>();
    private CoursesController cController = new CoursesController();
    
    private HashMap<String, Integer> topicNameToIDMap = new HashMap<>();
    private TopicsController tController = new TopicsController();
    
    private HashMap<String, Integer> subtopicNameToIDMap = new HashMap<>();
    private SubtopicsController sController = new SubtopicsController();
    
    private Integer currentExamId = null;
    private JPanel lastHighlightedPanel = null; // Class-level variable to track the last highlighted panel

    private static final String DEFAULT_ALL_OPTION = "--All--";

    public Exams() {
        initComponents();

        // Configure scrolling speed
        JScrollBar verticalScrollBar = qResultsScrollPane.getVerticalScrollBar();
        verticalScrollBar.setUnitIncrement(16); // Set the scroll speed (in pixels) for each click

        populateDropdowns();
        setupManageDropdownListeners();


        populateBResultsPanel(eController.getExamsWithFilter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mButtonGroup = new javax.swing.ButtonGroup();
        bButtonGroup = new javax.swing.ButtonGroup();
        headerPanel = new javax.swing.JPanel();
        returnButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        examsLabel = new javax.swing.JLabel();
        examsTabbedPane = new javax.swing.JTabbedPane();
        manageTab = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        newButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        genButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        examPanel = new javax.swing.JPanel();
        examTitleTF = new javax.swing.JTextField();
        questionsPanel = new javax.swing.JPanel();
        qSelectPanel = new javax.swing.JPanel();
        qSearchPanel = new javax.swing.JPanel();
        qSearchTF = new javax.swing.JTextField();
        qSearchButton = new javax.swing.JButton();
        qResultsScrollPane = new javax.swing.JScrollPane();
        qResultsPanel = new javax.swing.JPanel();
        ansPanel = new javax.swing.JPanel();
        ansListPanel = new javax.swing.JPanel();
        mOrganizePanel = new javax.swing.JTabbedPane();
        mFilterScrollTab = new javax.swing.JScrollPane();
        mFilterPanel = new javax.swing.JPanel();
        mUsedPanel = new javax.swing.JPanel();
        mUsedYesCB = new javax.swing.JCheckBox();
        mUsedNoCB = new javax.swing.JCheckBox();
        mDifficultyPanel = new javax.swing.JPanel();
        mDiffEasyCB = new javax.swing.JCheckBox();
        mDiffMedCB = new javax.swing.JCheckBox();
        mDiffHardCB = new javax.swing.JCheckBox();
        mCoursePanel = new javax.swing.JPanel();
        mCourseComboBox = new javax.swing.JComboBox<>();
        mTopicPanel = new javax.swing.JPanel();
        mTopicComboBox = new javax.swing.JComboBox<>();
        mSubtopicPanel = new javax.swing.JPanel();
        mSubtopicComboBox = new javax.swing.JComboBox<>();
        mSortTab = new javax.swing.JPanel();
        mSortRB1 = new javax.swing.JRadioButton();
        mSortRB2 = new javax.swing.JRadioButton();
        mSortRB3 = new javax.swing.JRadioButton();
        mSortRB4 = new javax.swing.JRadioButton();
        mSortRB5 = new javax.swing.JRadioButton();
        mSortRB6 = new javax.swing.JRadioButton();
        mSortRB7 = new javax.swing.JRadioButton();
        mSortRB8 = new javax.swing.JRadioButton();
        mSortRB9 = new javax.swing.JRadioButton();
        mSortRB10 = new javax.swing.JRadioButton();
        mSortRB11 = new javax.swing.JRadioButton();
        mAddedScrollTab = new javax.swing.JScrollPane();
        mAddedPanel = new javax.swing.JPanel();
        mTagsTab = new javax.swing.JPanel();
        mDateCreatedLabel = new javax.swing.JLabel();
        mDateCreatedTF = new javax.swing.JFormattedTextField();
        mDateEditedLabel = new javax.swing.JLabel();
        mDateEditedTF = new javax.swing.JFormattedTextField();
        mQNumberLabel = new javax.swing.JLabel();
        mQNumberTF = new javax.swing.JFormattedTextField();
        mDateAdminLabel = new javax.swing.JLabel();
        mDateAdminSpinner = new javax.swing.JSpinner();
        mExamCourseLabel = new javax.swing.JLabel();
        mExamCourseComboBox = new javax.swing.JComboBox<>();
        browseTab = new javax.swing.JPanel();
        bSearchPanel = new javax.swing.JPanel();
        bSearchTF = new javax.swing.JTextField();
        bSearchButton = new javax.swing.JButton();
        bResultsScrollPane = new javax.swing.JScrollPane();
        bResultsPanel = new javax.swing.JPanel();
        bOrganizePanel = new javax.swing.JPanel();
        bOrganizeTabbedPane = new javax.swing.JTabbedPane();
        bFilterScrollTab = new javax.swing.JScrollPane();
        bFilterPanel = new javax.swing.JPanel();
        bAdminPanel = new javax.swing.JPanel();
        bAdminYesCB = new javax.swing.JCheckBox();
        bAdminNoCB = new javax.swing.JCheckBox();
        bGradedPanel = new javax.swing.JPanel();
        bGradedYesCB = new javax.swing.JCheckBox();
        bGradedNoCB = new javax.swing.JCheckBox();
        bCoursePanel = new javax.swing.JPanel();
        bCourseComboBox = new javax.swing.JComboBox<>();
        bSortTab = new javax.swing.JPanel();
        bSortRB1 = new javax.swing.JRadioButton();
        bSortRB2 = new javax.swing.JRadioButton();
        bSortRB3 = new javax.swing.JRadioButton();
        bSortRB4 = new javax.swing.JRadioButton();
        bSortRB5 = new javax.swing.JRadioButton();
        bSortRB6 = new javax.swing.JRadioButton();
        bSortRB7 = new javax.swing.JRadioButton();

        setLayout(new java.awt.BorderLayout());

        headerPanel.setLayout(new java.awt.BorderLayout());

        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });
        headerPanel.add(returnButton, java.awt.BorderLayout.LINE_START);

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        headerPanel.add(helpButton, java.awt.BorderLayout.LINE_END);

        examsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        examsLabel.setText("Exams");
        headerPanel.add(examsLabel, java.awt.BorderLayout.CENTER);

        add(headerPanel, java.awt.BorderLayout.PAGE_START);

        controlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Controls"));

        newButton.setText("New Exam");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(newButton);

        saveButton.setText("Save Exam");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(saveButton);

        clearButton.setText("Clear Fields");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(clearButton);

        genButton.setText("Generate Questions");
        genButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(genButton);

        exportButton.setText("Export Exam");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(exportButton);

        deleteButton.setText("Delete Exam");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(deleteButton);

        examPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Exam Title"));

        examTitleTF.setText("Exam Title");
        examTitleTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                examTitleTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                examTitleTFFocusLost(evt);
            }
        });

        javax.swing.GroupLayout examPanelLayout = new javax.swing.GroupLayout(examPanel);
        examPanel.setLayout(examPanelLayout);
        examPanelLayout.setHorizontalGroup(
            examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(examPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(examTitleTF)
                .addContainerGap())
        );
        examPanelLayout.setVerticalGroup(
            examPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(examPanelLayout.createSequentialGroup()
                .addComponent(examTitleTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        questionsPanel.setLayout(new java.awt.GridLayout(2, 0));

        qSelectPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Question Selection"));

        qSearchPanel.setLayout(new java.awt.BorderLayout());

        qSearchTF.setText("Search Here");
        qSearchTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                qSearchTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                qSearchTFFocusLost(evt);
            }
        });
        qSearchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qSearchTFActionPerformed(evt);
            }
        });
        qSearchPanel.add(qSearchTF, java.awt.BorderLayout.CENTER);

        qSearchButton.setText("Search");
        qSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qSearchButtonActionPerformed(evt);
            }
        });
        qSearchPanel.add(qSearchButton, java.awt.BorderLayout.LINE_END);

        qResultsScrollPane.setBorder(null);

        qResultsPanel.setPreferredSize(null);

        javax.swing.GroupLayout qResultsPanelLayout = new javax.swing.GroupLayout(qResultsPanel);
        qResultsPanel.setLayout(qResultsPanelLayout);
        qResultsPanelLayout.setHorizontalGroup(
            qResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        qResultsPanelLayout.setVerticalGroup(
            qResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        qResultsScrollPane.setViewportView(qResultsPanel);

        javax.swing.GroupLayout qSelectPanelLayout = new javax.swing.GroupLayout(qSelectPanel);
        qSelectPanel.setLayout(qSelectPanelLayout);
        qSelectPanelLayout.setHorizontalGroup(
            qSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, qSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(qSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(qResultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(qSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        qSelectPanelLayout.setVerticalGroup(
            qSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(qSelectPanelLayout.createSequentialGroup()
                .addComponent(qSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qResultsScrollPane)
                .addContainerGap())
        );

        questionsPanel.add(qSelectPanel);

        ansPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview Answers"));

        javax.swing.GroupLayout ansListPanelLayout = new javax.swing.GroupLayout(ansListPanel);
        ansListPanel.setLayout(ansListPanelLayout);
        ansListPanelLayout.setHorizontalGroup(
            ansListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 359, Short.MAX_VALUE)
        );
        ansListPanelLayout.setVerticalGroup(
            ansListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout ansPanelLayout = new javax.swing.GroupLayout(ansPanel);
        ansPanel.setLayout(ansPanelLayout);
        ansPanelLayout.setHorizontalGroup(
            ansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ansListPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ansPanelLayout.setVerticalGroup(
            ansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ansListPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        questionsPanel.add(ansPanel);

        mUsedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Used"));

        mUsedYesCB.setText("Yes");

        mUsedNoCB.setText("No");

        javax.swing.GroupLayout mUsedPanelLayout = new javax.swing.GroupLayout(mUsedPanel);
        mUsedPanel.setLayout(mUsedPanelLayout);
        mUsedPanelLayout.setHorizontalGroup(
            mUsedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mUsedPanelLayout.createSequentialGroup()
                .addGroup(mUsedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mUsedYesCB)
                    .addComponent(mUsedNoCB))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        mUsedPanelLayout.setVerticalGroup(
            mUsedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mUsedPanelLayout.createSequentialGroup()
                .addComponent(mUsedYesCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mUsedNoCB))
        );

        mDifficultyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Difficulty"));

        mDiffEasyCB.setText("Easy");

        mDiffMedCB.setText("Medium");

        mDiffHardCB.setText("Hard");

        javax.swing.GroupLayout mDifficultyPanelLayout = new javax.swing.GroupLayout(mDifficultyPanel);
        mDifficultyPanel.setLayout(mDifficultyPanelLayout);
        mDifficultyPanelLayout.setHorizontalGroup(
            mDifficultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mDifficultyPanelLayout.createSequentialGroup()
                .addGroup(mDifficultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mDiffEasyCB)
                    .addComponent(mDiffHardCB)
                    .addComponent(mDiffMedCB))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        mDifficultyPanelLayout.setVerticalGroup(
            mDifficultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mDifficultyPanelLayout.createSequentialGroup()
                .addComponent(mDiffEasyCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mDiffMedCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mDiffHardCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mCoursePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Course"));

        mCourseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course 1", "Course 2", "Course 3", "Course 4" }));

        javax.swing.GroupLayout mCoursePanelLayout = new javax.swing.GroupLayout(mCoursePanel);
        mCoursePanel.setLayout(mCoursePanelLayout);
        mCoursePanelLayout.setHorizontalGroup(
            mCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mCourseComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mCoursePanelLayout.setVerticalGroup(
            mCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mTopicPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Topic"));

        mTopicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Topic 1", "Topic 2", "Topic 3", "Topic 4" }));

        javax.swing.GroupLayout mTopicPanelLayout = new javax.swing.GroupLayout(mTopicPanel);
        mTopicPanel.setLayout(mTopicPanelLayout);
        mTopicPanelLayout.setHorizontalGroup(
            mTopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mTopicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mTopicComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mTopicPanelLayout.setVerticalGroup(
            mTopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mTopicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mTopicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mSubtopicPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sub-Topic"));

        mSubtopicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sub-Topic 1", "Sub-Topic 2", "Sub-Topic 3", "Sub-Topic 4" }));

        javax.swing.GroupLayout mSubtopicPanelLayout = new javax.swing.GroupLayout(mSubtopicPanel);
        mSubtopicPanel.setLayout(mSubtopicPanelLayout);
        mSubtopicPanelLayout.setHorizontalGroup(
            mSubtopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mSubtopicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mSubtopicComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mSubtopicPanelLayout.setVerticalGroup(
            mSubtopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mSubtopicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mSubtopicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mFilterPanelLayout = new javax.swing.GroupLayout(mFilterPanel);
        mFilterPanel.setLayout(mFilterPanelLayout);
        mFilterPanelLayout.setHorizontalGroup(
            mFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mSubtopicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mCoursePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mDifficultyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mUsedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mTopicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mFilterPanelLayout.setVerticalGroup(
            mFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mUsedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mDifficultyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mCoursePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mTopicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSubtopicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        mFilterScrollTab.setViewportView(mFilterPanel);

        mOrganizePanel.addTab("Filter", mFilterScrollTab);

        mButtonGroup.add(mSortRB1);
        mSortRB1.setSelected(true);
        mSortRB1.setText("Default");

        mButtonGroup.add(mSortRB2);
        mSortRB2.setText("Images First");

        mButtonGroup.add(mSortRB3);
        mSortRB3.setText("Text First");

        mButtonGroup.add(mSortRB4);
        mSortRB4.setText("Last Used (Oldest First)");

        mButtonGroup.add(mSortRB5);
        mSortRB5.setText("Last Used (Newest First)");

        mButtonGroup.add(mSortRB6);
        mSortRB6.setText("Date Created (Oldest First)");

        mButtonGroup.add(mSortRB7);
        mSortRB7.setText("Date Created (Newest First)");

        mButtonGroup.add(mSortRB8);
        mSortRB8.setText("Times Used (Least First)");

        mButtonGroup.add(mSortRB9);
        mSortRB9.setText("Times Used (Most First)");

        mButtonGroup.add(mSortRB10);
        mSortRB10.setText("Difficulty (Easy First)");

        mButtonGroup.add(mSortRB11);
        mSortRB11.setText("Difficulty (Hard First)");

        javax.swing.GroupLayout mSortTabLayout = new javax.swing.GroupLayout(mSortTab);
        mSortTab.setLayout(mSortTabLayout);
        mSortTabLayout.setHorizontalGroup(
            mSortTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mSortTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mSortTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mSortRB1)
                    .addComponent(mSortRB2)
                    .addComponent(mSortRB3)
                    .addComponent(mSortRB4)
                    .addComponent(mSortRB5)
                    .addComponent(mSortRB6)
                    .addComponent(mSortRB7)
                    .addComponent(mSortRB8)
                    .addComponent(mSortRB9)
                    .addComponent(mSortRB10)
                    .addComponent(mSortRB11))
                .addContainerGap(231, Short.MAX_VALUE))
        );
        mSortTabLayout.setVerticalGroup(
            mSortTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mSortTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mSortRB1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mSortRB11)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        mOrganizePanel.addTab("Sort", mSortTab);

        javax.swing.GroupLayout mAddedPanelLayout = new javax.swing.GroupLayout(mAddedPanel);
        mAddedPanel.setLayout(mAddedPanelLayout);
        mAddedPanelLayout.setHorizontalGroup(
            mAddedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mAddedPanelLayout.setVerticalGroup(
            mAddedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        mAddedScrollTab.setViewportView(mAddedPanel);

        mOrganizePanel.addTab("Added Questions", mAddedScrollTab);

        mDateCreatedLabel.setText("Date Created:");

        mDateCreatedTF.setEditable(false);
        mDateCreatedTF.setText("--New--");
        mDateCreatedTF.setFocusable(false);

        mDateEditedLabel.setText("Last Edited:");

        mDateEditedTF.setEditable(false);
        mDateEditedTF.setText("--New--");
        mDateEditedTF.setFocusable(false);

        mQNumberLabel.setText("Number of Questions:");

        mQNumberTF.setEditable(false);
        mQNumberTF.setText("0");
        mQNumberTF.setFocusable(false);
        mQNumberTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mQNumberTFActionPerformed(evt);
            }
        });

        mDateAdminLabel.setText("Date Administered:");

        mDateAdminSpinner.setModel(new javax.swing.SpinnerDateModel());

        mExamCourseLabel.setText("Course:");

        mExamCourseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout mTagsTabLayout = new javax.swing.GroupLayout(mTagsTab);
        mTagsTab.setLayout(mTagsTabLayout);
        mTagsTabLayout.setHorizontalGroup(
            mTagsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mTagsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mTagsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mTagsTabLayout.createSequentialGroup()
                        .addComponent(mDateCreatedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mDateCreatedTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mTagsTabLayout.createSequentialGroup()
                        .addComponent(mDateEditedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mDateEditedTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mTagsTabLayout.createSequentialGroup()
                        .addComponent(mQNumberLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mQNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mTagsTabLayout.createSequentialGroup()
                        .addComponent(mDateAdminLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mDateAdminSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mTagsTabLayout.createSequentialGroup()
                        .addComponent(mExamCourseLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mExamCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(141, Short.MAX_VALUE))
        );
        mTagsTabLayout.setVerticalGroup(
            mTagsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mTagsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mTagsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mDateCreatedTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mDateCreatedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mTagsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mDateEditedLabel)
                    .addComponent(mDateEditedTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mTagsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mQNumberLabel)
                    .addComponent(mQNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mTagsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mDateAdminLabel)
                    .addComponent(mDateAdminSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mTagsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mExamCourseLabel)
                    .addComponent(mExamCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(240, Short.MAX_VALUE))
        );

        mOrganizePanel.addTab("Exam Tags", mTagsTab);

        javax.swing.GroupLayout manageTabLayout = new javax.swing.GroupLayout(manageTab);
        manageTab.setLayout(manageTabLayout);
        manageTabLayout.setHorizontalGroup(
            manageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(examPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controlsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(manageTabLayout.createSequentialGroup()
                        .addComponent(questionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mOrganizePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        manageTabLayout.setVerticalGroup(
            manageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(examPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mOrganizePanel))
                .addContainerGap())
        );

        examsTabbedPane.addTab("Manage", manageTab);

        bSearchPanel.setLayout(new java.awt.BorderLayout());

        bSearchTF.setText("Search Here");
        bSearchTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bSearchTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bSearchTFFocusLost(evt);
            }
        });
        bSearchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchTFActionPerformed(evt);
            }
        });
        bSearchPanel.add(bSearchTF, java.awt.BorderLayout.CENTER);

        bSearchButton.setText("Search");
        bSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchButtonActionPerformed(evt);
            }
        });
        bSearchPanel.add(bSearchButton, java.awt.BorderLayout.LINE_END);

        bResultsPanel.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout bResultsPanelLayout = new javax.swing.GroupLayout(bResultsPanel);
        bResultsPanel.setLayout(bResultsPanelLayout);
        bResultsPanelLayout.setHorizontalGroup(
            bResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 554, Short.MAX_VALUE)
        );
        bResultsPanelLayout.setVerticalGroup(
            bResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 503, Short.MAX_VALUE)
        );

        bResultsScrollPane.setViewportView(bResultsPanel);

        bFilterScrollTab.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        bAdminPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Administered"));

        bAdminYesCB.setText("Yes");

        bAdminNoCB.setText("No");

        javax.swing.GroupLayout bAdminPanelLayout = new javax.swing.GroupLayout(bAdminPanel);
        bAdminPanel.setLayout(bAdminPanelLayout);
        bAdminPanelLayout.setHorizontalGroup(
            bAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bAdminPanelLayout.createSequentialGroup()
                .addGroup(bAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bAdminYesCB)
                    .addComponent(bAdminNoCB))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        bAdminPanelLayout.setVerticalGroup(
            bAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bAdminPanelLayout.createSequentialGroup()
                .addComponent(bAdminYesCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bAdminNoCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bGradedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Graded"));

        bGradedYesCB.setText("Yes");

        bGradedNoCB.setText("No");

        javax.swing.GroupLayout bGradedPanelLayout = new javax.swing.GroupLayout(bGradedPanel);
        bGradedPanel.setLayout(bGradedPanelLayout);
        bGradedPanelLayout.setHorizontalGroup(
            bGradedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bGradedPanelLayout.createSequentialGroup()
                .addGroup(bGradedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bGradedYesCB)
                    .addComponent(bGradedNoCB))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        bGradedPanelLayout.setVerticalGroup(
            bGradedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bGradedPanelLayout.createSequentialGroup()
                .addComponent(bGradedYesCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bGradedNoCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bCoursePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Course"));

        bCourseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "course1", "course2", "course3", "course4" }));

        javax.swing.GroupLayout bCoursePanelLayout = new javax.swing.GroupLayout(bCoursePanel);
        bCoursePanel.setLayout(bCoursePanelLayout);
        bCoursePanelLayout.setHorizontalGroup(
            bCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bCourseComboBox, 0, 190, Short.MAX_VALUE)
                .addContainerGap())
        );
        bCoursePanelLayout.setVerticalGroup(
            bCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout bFilterPanelLayout = new javax.swing.GroupLayout(bFilterPanel);
        bFilterPanel.setLayout(bFilterPanelLayout);
        bFilterPanelLayout.setHorizontalGroup(
            bFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bAdminPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bCoursePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bGradedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        bFilterPanelLayout.setVerticalGroup(
            bFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bAdminPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bGradedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCoursePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bFilterScrollTab.setViewportView(bFilterPanel);

        bOrganizeTabbedPane.addTab("Filter", bFilterScrollTab);

        bButtonGroup.add(bSortRB1);
        bSortRB1.setSelected(true);
        bSortRB1.setText("Default");

        bButtonGroup.add(bSortRB2);
        bSortRB2.setText("Date Administered (Oldest First)");

        bButtonGroup.add(bSortRB3);
        bSortRB3.setText("Date Administered (Newest First)");

        bButtonGroup.add(bSortRB4);
        bSortRB4.setText("Date Created (Oldest First)");

        bButtonGroup.add(bSortRB5);
        bSortRB5.setText("Date Created (Newest First)");

        bButtonGroup.add(bSortRB6);
        bSortRB6.setText("Performance (Lowest First)");

        bButtonGroup.add(bSortRB7);
        bSortRB7.setText("Performance (Highest First)");

        javax.swing.GroupLayout bSortTabLayout = new javax.swing.GroupLayout(bSortTab);
        bSortTab.setLayout(bSortTabLayout);
        bSortTabLayout.setHorizontalGroup(
            bSortTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bSortTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bSortTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bSortRB1)
                    .addComponent(bSortRB2)
                    .addComponent(bSortRB3)
                    .addComponent(bSortRB4)
                    .addComponent(bSortRB5)
                    .addComponent(bSortRB6)
                    .addComponent(bSortRB7))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        bSortTabLayout.setVerticalGroup(
            bSortTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bSortTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bSortRB1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSortRB2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSortRB3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSortRB4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSortRB5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSortRB6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSortRB7)
                .addContainerGap(310, Short.MAX_VALUE))
        );

        bOrganizeTabbedPane.addTab("Sort", bSortTab);

        javax.swing.GroupLayout bOrganizePanelLayout = new javax.swing.GroupLayout(bOrganizePanel);
        bOrganizePanel.setLayout(bOrganizePanelLayout);
        bOrganizePanelLayout.setHorizontalGroup(
            bOrganizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bOrganizeTabbedPane)
        );
        bOrganizePanelLayout.setVerticalGroup(
            bOrganizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bOrganizeTabbedPane)
        );

        javax.swing.GroupLayout browseTabLayout = new javax.swing.GroupLayout(browseTab);
        browseTab.setLayout(browseTabLayout);
        browseTabLayout.setHorizontalGroup(
            browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bResultsScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bOrganizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        browseTabLayout.setVerticalGroup(
            browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bOrganizePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(browseTabLayout.createSequentialGroup()
                        .addComponent(bSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bResultsScrollPane)))
                .addContainerGap())
        );

        examsTabbedPane.addTab("Browse", browseTab);

        add(examsTabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void genButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genButtonActionPerformed
        // TODO add your handling code here:
        if (currentExamId == null) {
            JOptionPane.showMessageDialog(this, 
                "Please create or select an exam first", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        GenerateQuestionForm popup = new GenerateQuestionForm(null, true, currentExamId);
        popup.setLocationRelativeTo(null);
        popup.setVisible(true);
        
        // Refresh the question list after generation
        if (currentExamId != null) {
            try {
                ResultSet examQuestions = eController.getQuestionsFromExam(currentExamId);
                populateMListPanels(examQuestions, buildQuestionQuery());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_genButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        // TODO add your handling code here:
        if (currentExamId == null) {
            JOptionPane.showMessageDialog(this, 
                "Please create or select an exam first", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            // Ask user for file location
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Save Exam PDF");
            fileChooser.setSelectedFile(new File("Exam_" + currentExamId + ".pdf"));
            fileChooser.setFileFilter(new FileNameExtensionFilter("PDF Files", "pdf"));
            
            int userSelection = fileChooser.showSaveDialog(this);
            
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                // Ensure the file has .pdf extension
                if (!fileToSave.getName().toLowerCase().endsWith(".pdf")) {
                    fileToSave = new File(fileToSave.getAbsolutePath() + ".pdf");
                }
                
                // Generate the PDF
                eController.generateExamPDF(currentExamId, fileToSave.getAbsolutePath());
                
                JOptionPane.showMessageDialog(this, 
                    "Exam PDF generated successfully at:\n" + fileToSave.getAbsolutePath(), 
                    "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Error generating PDF: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        // Check if an exam is selected
        if (currentExamId == null) {
            JOptionPane.showMessageDialog(this, "No exam selected to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Confirm deletion with user
        int confirm = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to delete this exam?\nThis action will not remove associated questions from the database.", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // First delete all exam-question relationships
                ResultSet examQuestions = eController.getQuestionsFromExam(currentExamId);
                while (examQuestions != null && examQuestions.next()) {
                    int questionId = examQuestions.getInt("questionID");
                    eController.removeQuestionFromExam(currentExamId, questionId);
                }
                
                // Then delete the exam itself
                boolean success = eController.deleteExam(currentExamId);
                
                if (success) {
                    JOptionPane.showMessageDialog(this, "Exam deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    currentExamId = null;
                    clearFields();
                    // Refresh the browse panel
                    populateBResultsPanel(eController.getExamsWithFilter());
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete exam", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting exam: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void qSearchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qSearchTFActionPerformed
        // TODO add your handling code here:
        String sqlQuery = buildQuestionQuery();
        ResultSet examQuestions = eController.getQuestionsFromExam(currentExamId);
        populateMListPanels(examQuestions, sqlQuery);
    }//GEN-LAST:event_qSearchTFActionPerformed

    private void bSearchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchTFActionPerformed
        // TODO add your handling code here:
        String sqlQuery = buildExamQuery();
        ResultSet rs = eController.getExamsWithFilter(sqlQuery);
        populateBResultsPanel(rs);
    }//GEN-LAST:event_bSearchTFActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        // TODO add your handling code here:
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        CardLayout layout = (CardLayout) frame.getContentPane().getLayout();
        layout.show(frame.getContentPane(), "Home");
    }//GEN-LAST:event_returnButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
        new Help(null, true, 3);
    }//GEN-LAST:event_helpButtonActionPerformed

    private void qSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qSearchButtonActionPerformed
        // TODO add your handling code here:
        qSearchTFActionPerformed(evt);
    }//GEN-LAST:event_qSearchButtonActionPerformed

    private void bSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchButtonActionPerformed
        // TODO add your handling code here:
        bSearchTFActionPerformed(evt);
    }//GEN-LAST:event_bSearchButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        // Validate required fields
        if (examTitleTF.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Exam title is required", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get exam data from UI components
        String examTitle = examTitleTF.getText().trim();
        String courseCode = (String) mCourseComboBox.getSelectedItem();
        Integer courseID = courseCodeToIDMap.get(courseCode);

        Float performance = null;
        try {
            if (currentExamId == null) {
                // Create new exam - we'll use numQuestions=0 initially since we'll add questions separately
                eController.insertExam(examTitle, 0, courseID, performance);
                
                // Get the ID of the newly created exam
                ResultSet latestExam = eController.getExamsWithFilter("SELECT * FROM exams ORDER BY examID DESC LIMIT 1");
                if (latestExam != null && latestExam.next()) {
                    currentExamId = latestExam.getInt("examID");
                    JOptionPane.showMessageDialog(this, "Exam created successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    
                    // Update the exam tags with new data
                    mDateCreatedTF.setText(latestExam.getString("dateCreated"));
                    mDateEditedTF.setText(mDateCreatedTF.getText());
//                    mPerfTF.setText("0");
                    
                    // Refresh the browse panel
                    populateBResultsPanel(eController.getExamsWithFilter());
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to create exam", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // For existing exam, we need to update the title and metadata
                // Since we don't have a direct update method, we'll use the question operations to trigger updates
                
                // First get the current questions
                Set<Integer> currentQuestionIds = new HashSet<>();
                ResultSet currentQuestions = eController.getQuestionsFromExam(currentExamId);
                while (currentQuestions != null && currentQuestions.next()) {
                    currentQuestionIds.add(currentQuestions.getInt("questionID"));
                }
                
                // To "update" the exam, we'll remove and re-add one question to trigger the update mechanism
                if (!currentQuestionIds.isEmpty()) {
                    int firstQuestionId = currentQuestionIds.iterator().next();
                    try {
                        // This will trigger the lastEdited update
                        eController.removeQuestionFromExam(currentExamId, firstQuestionId);
                        eController.addQuestionToExam(currentExamId, firstQuestionId);
                        
                        JOptionPane.showMessageDialog(this, "Exam updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                        
                        // Update last edited date
                        mDateEditedTF.setText(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
                        
                        // Refresh the browse panel
                        populateBResultsPanel(eController.getExamsWithFilter());
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Failed to update exam", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    // No questions in exam - can't trigger update through question operations
                    JOptionPane.showMessageDialog(this, 
                        "Exam title saved but metadata not updated (add at least one question)", 
                        "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving exam: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        clearFields();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        // TODO add your handling code here:
        currentExamId = null;
        clearFields();

        qResultsPanel.removeAll();
        qResultsPanel.revalidate();
        qResultsPanel.repaint();
        mAddedPanel.removeAll();
        mAddedPanel.revalidate();
        mAddedPanel.repaint();

        // Reset the exam title and other fields
        examTitleTF.setText("");
        mDateCreatedTF.setText("--New--");
//        mDateAdminTF.setText("Never");
        mDateEditedTF.setText("--New--");
//        mPerfTF.setText("0");
    }//GEN-LAST:event_newButtonActionPerformed

    private void examTitleTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_examTitleTFFocusGained
        // TODO add your handling code here:
        if(examTitleTF.getText().equals("Exam Title")){
            examTitleTF.setText("");
            examTitleTF.setForeground(new Color(0,0,0));
        }
    }//GEN-LAST:event_examTitleTFFocusGained

    private void examTitleTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_examTitleTFFocusLost
        // TODO add your handling code here:
        if(examTitleTF.getText().equals("")){
            examTitleTF.setText("Exam Title");
            examTitleTF.setForeground(new Color(204,204,204));
        }
    }//GEN-LAST:event_examTitleTFFocusLost

    private void qSearchTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qSearchTFFocusGained
        // TODO add your handling code here:
        if(qSearchTF.getText().equals("Search Here")){
            qSearchTF.setText("");
            qSearchTF.setForeground(new Color(0,0,0));
        }
    }//GEN-LAST:event_qSearchTFFocusGained

    private void qSearchTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qSearchTFFocusLost
        // TODO add your handling code here:
        if(qSearchTF.getText().equals("")){
            qSearchTF.setText("Search Here");
            qSearchTF.setForeground(new Color(204,204,204));
        }
    }//GEN-LAST:event_qSearchTFFocusLost

    private void bSearchTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bSearchTFFocusGained
        // TODO add your handling code here:
        if(bSearchTF.getText().equals("Search Here")){
            bSearchTF.setText("");
            bSearchTF.setForeground(new Color(0,0,0));
        }
    }//GEN-LAST:event_bSearchTFFocusGained

    private void bSearchTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bSearchTFFocusLost
        // TODO add your handling code here:
        if(bSearchTF.getText().equals("")){
            bSearchTF.setText("Search Here");
            bSearchTF.setForeground(new Color(204,204,204));
        }
    }//GEN-LAST:event_bSearchTFFocusLost

    private void mQNumberTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mQNumberTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mQNumberTFActionPerformed

    private void clearFields() {
        // Reset the filter and sort options
        bAdminYesCB.setSelected(false);
        bAdminNoCB.setSelected(false);
        bGradedYesCB.setSelected(false);
        bGradedNoCB.setSelected(false);
        bCourseComboBox.setSelectedIndex(0);
        bSearchTF.setText("");
        mButtonGroup.setSelected(mSortRB1.getModel(), true);
        ansListPanel.removeAll();
        ansListPanel.revalidate();
        ansListPanel.repaint();
    }

    private String buildExamQuery() {
        StringBuilder sqlQuery = new StringBuilder("SELECT * FROM exams WHERE 1=1");

        // Apply filters
        if (bAdminYesCB.isSelected() && !bAdminNoCB.isSelected()) {
            sqlQuery.append(" AND lastUsed IS NOT NULL");
        } else if (bAdminNoCB.isSelected() && !bAdminYesCB.isSelected()) {
            sqlQuery.append(" AND lastUsed IS NULL");
        }

        // TODO: Add Graded filter when implemented
        // if (bGradedYesCB.isSelected() && !bGradedNoCB.isSelected()) {
        //     sqlQuery.append(" AND graded = 1");
        // } else if (bGradedNoCB.isSelected() && !bGradedYesCB.isSelected()) {
        //     sqlQuery.append(" AND graded = 0");
        // }

        // Handle course filter
        String selectedCourse = (String) bCourseComboBox.getSelectedItem();
        if (selectedCourse != null && !selectedCourse.isEmpty() && !selectedCourse.equals("--All--")) {
            Integer courseID = courseCodeToIDMap.get(selectedCourse);
            sqlQuery.append(" AND course = '").append(courseID).append("'");
        }

        // Handle search term
        String searchTerm = bSearchTF.getText().trim();
        if (searchTerm != null && !searchTerm.isEmpty() && !searchTerm.equals("Search Here")) {
            sqlQuery.append(" AND examTitle LIKE '%").append(searchTerm).append("%'");
        }

        // Handle sorting
        String sortOption = getSelectedBSortOption();
        switch (sortOption) {
            case "DateAdministeredOldestFirst" -> sqlQuery.append(" ORDER BY lastUsed ASC");
            case "DateAdministeredNewestFirst" -> sqlQuery.append(" ORDER BY lastUsed DESC");
            case "DateCreatedOldestFirst" -> sqlQuery.append(" ORDER BY dateCreated ASC");
            case "DateCreatedNewestFirst" -> sqlQuery.append(" ORDER BY dateCreated DESC");
            case "PerformanceLowestFirst" -> sqlQuery.append(" ORDER BY performanceMetric ASC");
            case "PerformanceHighestFirst" -> sqlQuery.append(" ORDER BY performanceMetric DESC");
            default -> sqlQuery.append(" ORDER BY examID ASC");
        }

        System.out.println(sqlQuery.toString());
        return sqlQuery.toString();
    }

    private String getSelectedBSortOption() {
        if (bSortRB1.isSelected()) return "Default";
        if (bSortRB2.isSelected()) return "DateAdministeredOldestFirst";
        if (bSortRB3.isSelected()) return "DateAdministeredNewestFirst";
        if (bSortRB4.isSelected()) return "DateCreatedOldestFirst";
        if (bSortRB5.isSelected()) return "DateCreatedNewestFirst";
        if (bSortRB6.isSelected()) return "PerformanceLowestFirst";
        if (bSortRB7.isSelected()) return "PerformanceHighestFirst";
        return "Default";
    }

    private String buildQuestionQuery() {
        StringBuilder sqlQuery = new StringBuilder("SELECT * FROM questions WHERE 1=1");

        // Apply filters
        if (mUsedYesCB.isSelected() && !mUsedNoCB.isSelected()) {
            sqlQuery.append(" AND lastUsed IS NOT NULL");
        } else if (mUsedNoCB.isSelected() && !mUsedYesCB.isSelected()) {
            sqlQuery.append(" AND lastUsed IS NULL");
        }

        ArrayList<String> selectedDifficulties = new ArrayList<>();
        if (mDiffEasyCB.isSelected()) selectedDifficulties.add("'Easy'");
        if (mDiffMedCB.isSelected()) selectedDifficulties.add("'Medium'");
        if (mDiffHardCB.isSelected()) selectedDifficulties.add("'Hard'");
        if (!selectedDifficulties.isEmpty()) {
            sqlQuery.append(" AND difficulty IN (")
                    .append(String.join(", ", selectedDifficulties))
                    .append(")");
        }

        // Handle course filter
        String selectedCourse = (String) mCourseComboBox.getSelectedItem();
        if (selectedCourse != null && !selectedCourse.equals("--All--")) {
            Integer courseID = courseCodeToIDMap.get(selectedCourse);
            sqlQuery.append(" AND course = '").append(courseID).append("'");
        }

        // Handle topic filter
        String selectedTopic = (String) mTopicComboBox.getSelectedItem();
        System.out.println("Selected Topic: " + selectedTopic);
        if (selectedTopic != null && !selectedTopic.equals("--All--")) {
            Integer topicID = topicNameToIDMap.get(selectedTopic);
            System.out.println("Topic ID: " + topicID);
            sqlQuery.append(" AND topic = '").append(topicID).append("'");
        }

        // Handle subtopic filter
        String selectedSubtopic = (String) mSubtopicComboBox.getSelectedItem();
        if (selectedSubtopic != null && !selectedSubtopic.equals("--All--")) {
            Integer subtopicID = subtopicNameToIDMap.get(selectedSubtopic);
            sqlQuery.append(" AND subTopic = '").append(subtopicID).append("'");
        }

        // Handle search term
        String searchTerm = qSearchTF.getText().trim();
        if (searchTerm != null && !searchTerm.isEmpty() && !searchTerm.equals("Search Here")) {
            sqlQuery.append(" AND question LIKE '%").append(searchTerm).append("%'");
        }

        // Handle sorting
        String sortOption = getSelectedMSortOption();
        switch (sortOption) {
            case "Default" -> sqlQuery.append(" ORDER BY questionID ASC");
            case "ImagesFirst" -> sqlQuery.append(" ORDER BY hasImage DESC");
            case "TextFirst" -> sqlQuery.append(" ORDER BY hasImage ASC");
            case "LastUsedOldestFirst" -> sqlQuery.append(" ORDER BY lastUsed ASC");
            case "LastUsedNewestFirst" -> sqlQuery.append(" ORDER BY lastUsed DESC");
            case "DateCreatedOldestFirst" -> sqlQuery.append(" ORDER BY dateCreated ASC");
            case "DateCreatedNewestFirst" -> sqlQuery.append(" ORDER BY dateCreated DESC");
            case "TimesUsedLeastFirst" -> sqlQuery.append(" ORDER BY timesUsed ASC");
            case "TimesUsedMostFirst" -> sqlQuery.append(" ORDER BY timesUsed DESC");
            case "DifficultyEasyFirst" -> sqlQuery.append(" ORDER BY CASE difficulty WHEN 'Easy' THEN 1 WHEN 'Medium' THEN 2 WHEN 'Hard' THEN 3 END");
            case "DifficultyHardFirst" -> sqlQuery.append(" ORDER BY CASE difficulty WHEN 'Hard' THEN 1 WHEN 'Medium' THEN 2 WHEN 'Easy' THEN 3 END");
            default -> sqlQuery.append(" ORDER BY questionID"); // Default sorting
        }
        
        System.out.println(sqlQuery.toString());
        return sqlQuery.toString();
    }

    private String getSelectedMSortOption() {
        if (mSortRB1.isSelected()) return "Default";
        if (mSortRB2.isSelected()) return "ImagesFirst";
        if (mSortRB3.isSelected()) return "TextFirst";
        if (mSortRB4.isSelected()) return "LastUsedOldestFirst";
        if (mSortRB5.isSelected()) return "LastUsedNewestFirst";
        if (mSortRB6.isSelected()) return "DateCreatedOldestFirst";
        if (mSortRB7.isSelected()) return "DateCreatedNewestFirst";
        if (mSortRB8.isSelected()) return "TimesUsedLeastFirst";
        if (mSortRB9.isSelected()) return "TimesUsedMostFirst";
        if (mSortRB10.isSelected()) return "DifficultyEasyFirst";
        if (mSortRB11.isSelected()) return "DifficultyHardFirst";
        return "Default"; // Default sorting
    }

    private void populateDropdowns() {
        // Clear existing items
        mCourseComboBox.removeAllItems();
        mTopicComboBox.removeAllItems();
        mSubtopicComboBox.removeAllItems();
        bCourseComboBox.removeAllItems();
        courseCodeToIDMap.clear();
        topicNameToIDMap.clear();
        subtopicNameToIDMap.clear();

        // Add "--All--" option
        mCourseComboBox.addItem(DEFAULT_ALL_OPTION);
        mTopicComboBox.addItem(DEFAULT_ALL_OPTION);
        mSubtopicComboBox.addItem(DEFAULT_ALL_OPTION);
        bCourseComboBox.addItem(DEFAULT_ALL_OPTION);

        // Get distinct values from the database
        ArrayList<String[]> courses = cController.getAllCourses();
    
        // Populate the dropdowns
        for (String[] course : courses) {
            String courseCode = course[0];
            int courseID = Integer.parseInt(course[1]);
            bCourseComboBox.addItem(courseCode);
            mCourseComboBox.addItem(courseCode);
            courseCodeToIDMap.put(courseCode, courseID);
        }

        // Initially disable dependent dropdowns
        mTopicComboBox.setEnabled(false);
        mSubtopicComboBox.setEnabled(false);
    }

    private void setupManageDropdownListeners() {
        mCourseComboBox.addActionListener(e -> {
            String selectedCourse = (String) mCourseComboBox.getSelectedItem();
            if (DEFAULT_ALL_OPTION.equals(selectedCourse)) {
                mTopicComboBox.setEnabled(false);
                mSubtopicComboBox.setEnabled(false);
                mTopicComboBox.setSelectedItem(DEFAULT_ALL_OPTION);
                mSubtopicComboBox.setSelectedItem(DEFAULT_ALL_OPTION);
            } else {
                Integer courseID = courseCodeToIDMap.get(selectedCourse);
                mTopicComboBox.setEnabled(true);
                populateTopicsDropdown(mTopicComboBox, courseID);
            }
        });

        mTopicComboBox.addActionListener(e -> {
            String selectedTopic = (String) mTopicComboBox.getSelectedItem();
            if (DEFAULT_ALL_OPTION.equals(selectedTopic)) {
                mSubtopicComboBox.setEnabled(false);
                mSubtopicComboBox.setSelectedItem(DEFAULT_ALL_OPTION);
            } else {
                mSubtopicComboBox.setEnabled(true);
                populateSubtopicsDropdown(mSubtopicComboBox, selectedTopic);
            }
        });
    }
    
    private void populateTopicsDropdown(JComboBox<String> topicDropdown, Integer course) {
        topicDropdown.removeAllItems();
        topicDropdown.addItem(DEFAULT_ALL_OPTION);

        ArrayList<String[]> topics = tController.getTopicsByCourseId(course);
        for (String[] topic : topics) {
            String topicName = topic[0];
            topicDropdown.addItem(topicName);
            topicNameToIDMap.put(topicName, Integer.parseInt(topic[1])); // Map topicName to topicID
        }
    }

    private void populateSubtopicsDropdown(JComboBox<String> subtopicDropdown, String topicName) {
        subtopicDropdown.removeAllItems();
        subtopicDropdown.addItem(DEFAULT_ALL_OPTION);

        // Get the topicID from the topicNameToIDMap
        Integer topicID = topicNameToIDMap.get(topicName);
        if (topicID == null) {
            System.err.println("Error: topicID is null for topicName: " + topicName);
            return; // Exit early if topicID is null
        }

        // Fetch subtopics using the topicID
        ArrayList<String[]> subtopics = sController.getSubtopicsByTopicId(topicID);
        for (String[] subtopic : subtopics) {
            String subtopicName = subtopic[0];
            subtopicDropdown.addItem(subtopicName);
            subtopicNameToIDMap.put(subtopicName, Integer.parseInt(subtopic[1])); // Map subtopicName to subtopicID
        }
    }


    private void populateBResultsPanel(ResultSet rs) {
        // Clear existing components
        bResultsPanel.removeAll();
        bResultsPanel.setLayout(new BoxLayout(bResultsPanel, BoxLayout.Y_AXIS));
        
        // Reset highlighted panel
        lastHighlightedPanel = null;
    
        try {
            while (rs != null && rs.next()) {
                // Create a panel for each exam
                JPanel examPanel = new JPanel(new BorderLayout());
                examPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
                examPanel.setOpaque(true); // Required for background color to show
    
                // Add exam title as a label
                JLabel examTitleLabel = new JLabel(rs.getString("examTitle"));
                examPanel.add(examTitleLabel, BorderLayout.CENTER);
    
                // Make the panel clickable
                examPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                examPanel.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        // Remove highlight from previously selected panel
                        if (lastHighlightedPanel != null) {
                            lastHighlightedPanel.setBackground(null);
                            lastHighlightedPanel.repaint();
                        }
                        
                        // Highlight the clicked panel
                        examPanel.setBackground(new Color(173, 216, 230)); // Light blue color
                        lastHighlightedPanel = examPanel;
                    }
                });
    
                // Add a details button
                JButton detailsButton = new JButton("Details");
                int examId = rs.getInt("examID");
                detailsButton.putClientProperty("examId", examId);
    
                detailsButton.addActionListener(e -> {
                    // Remove highlight from previously selected panel
                    if (lastHighlightedPanel != null) {
                        lastHighlightedPanel.setBackground(null);
                        lastHighlightedPanel.repaint();
                    }
                    
                    // Highlight the clicked panel
                    examPanel.setBackground(new Color(173, 216, 230)); // Light blue color
                    lastHighlightedPanel = examPanel;
                    
                    examsTabbedPane.setSelectedIndex(0);
                    loadExamData(examId);
                });
    
                examPanel.add(detailsButton, BorderLayout.EAST);
                bResultsPanel.add(examPanel);
                bResultsPanel.add(Box.createRigidArea(new Dimension(0, 5)));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    
        bResultsPanel.add(Box.createVerticalGlue());
        bResultsPanel.revalidate();
        bResultsPanel.repaint();
    }

    
    private void populateMListPanels(ResultSet examQuestions, String allQuestionsQuery) {
        // Clear existing components
        qResultsPanel.removeAll();
        qResultsPanel.setLayout(new BoxLayout(qResultsPanel, BoxLayout.Y_AXIS));
    
        mAddedPanel.removeAll();
        mAddedPanel.setLayout(new BoxLayout(mAddedPanel, BoxLayout.Y_AXIS));
        
        // Clear answers panel
        ansListPanel.removeAll();
        ansListPanel.setLayout(new BoxLayout(ansListPanel, BoxLayout.Y_AXIS));
    
        // Reset highlighted panel
        lastHighlightedPanel = null;
    
        try {
            // First collect all question IDs that are in the exam
            HashSet<Integer> examQuestionIds = new HashSet<>();
            if (examQuestions != null) {
                while (examQuestions.next()) {
                    examQuestionIds.add(examQuestions.getInt("questionID"));
                }
            }
    
            // Fetch all questions in the database
            ResultSet allQuestions = qController.getQuestionsWithFilter(allQuestionsQuery);
    
            while (allQuestions != null && allQuestions.next()) {
                int questionId = allQuestions.getInt("questionID");
                String questionText = allQuestions.getString("question");
                
                // Create a panel for each question
                JPanel questionPanel = new JPanel(new BorderLayout());
                questionPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
                questionPanel.putClientProperty("questionId", questionId);
                questionPanel.setOpaque(true); // Required for background color to show
    
                // Add question text as a label
                JLabel questionLabel = new JLabel(questionText);
                questionPanel.add(questionLabel, BorderLayout.CENTER);
    
                // Make the panel clickable
                questionPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                questionPanel.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        // Remove highlight from previously selected panel
                        if (lastHighlightedPanel != null) {
                            lastHighlightedPanel.setBackground(null);
                            lastHighlightedPanel.repaint();
                        }
                        
                        // Highlight the clicked panel
                        questionPanel.setBackground(new Color(173, 216, 230)); // Light blue color
                        lastHighlightedPanel = questionPanel;
                        
                        // Show answers
                        showQuestionAnswers(questionId, questionText);
                    }
                });
    
                // Add to appropriate panel based on whether it's in the exam
                if (examQuestionIds.contains(questionId)) {
                    // Create Remove button for questions already in exam
                    JButton removeButton = new JButton("Remove");
                    removeButton.putClientProperty("questionId", questionId);
                    
                    removeButton.addActionListener(e -> {
                        try {
                            eController.removeQuestionFromExam(currentExamId, questionId);
                            // Refresh the panels after removal
                            ResultSet updatedExamQuestions = eController.getQuestionsFromExam(currentExamId);
                            populateMListPanels(updatedExamQuestions, allQuestionsQuery);
                        } catch (SQLException ex) {
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(Exams.this, "Error removing question", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                    
                    questionPanel.add(removeButton, BorderLayout.EAST);
                    mAddedPanel.add(questionPanel);
                    mAddedPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                } else {
                    // Create Add button for questions not in exam
                    JButton addButton = new JButton("Add");
                    addButton.putClientProperty("questionId", questionId);
                    
                    addButton.addActionListener(e -> {
                        try {
                            eController.addQuestionToExam(currentExamId, questionId);
                            // Refresh the panels after addition
                            ResultSet updatedExamQuestions = eController.getQuestionsFromExam(currentExamId);
                            populateMListPanels(updatedExamQuestions, allQuestionsQuery);
                        } catch (SQLException ex) {
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(Exams.this, "Error adding question", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                    
                    questionPanel.add(addButton, BorderLayout.EAST);
                    qResultsPanel.add(questionPanel);
                    qResultsPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading questions", "Error", JOptionPane.ERROR_MESSAGE);
        }
    
        qResultsPanel.add(Box.createVerticalGlue());
        qResultsPanel.revalidate();
        qResultsPanel.repaint();
    
        mAddedPanel.add(Box.createVerticalGlue());
        mAddedPanel.revalidate();
        mAddedPanel.repaint();
    }


    private void showQuestionAnswers(int questionId, String questionText) {
        ansListPanel.removeAll();
        ansListPanel.setLayout(new BoxLayout(ansListPanel, BoxLayout.Y_AXIS));
        
        try {
            // Get the question with its answers
            ResultSet question = qController.getQuestion(questionId);
            
            if (question != null && question.next()) {
                // Get all answers from the question record
                String correctAnswer = question.getString("correctAnswer");
                String wrongAnswer1 = question.getString("wrongAnswer1");
                String wrongAnswer2 = question.getString("wrongAnswer2");
                String wrongAnswer3 = question.getString("wrongAnswer3");
                
                // Create a list of answers with their correctness
                ArrayList<Map.Entry<String, Boolean>> answers = new ArrayList<>();
                answers.add(new AbstractMap.SimpleEntry<>(correctAnswer, true));
                answers.add(new AbstractMap.SimpleEntry<>(wrongAnswer1, false));
                answers.add(new AbstractMap.SimpleEntry<>(wrongAnswer2, false));
                answers.add(new AbstractMap.SimpleEntry<>(wrongAnswer3, false));
                
                // Shuffle the answers to not always show correct answer first
                Collections.shuffle(answers);
                
                // Add each answer
                for (Map.Entry<String, Boolean> entry : answers) {
                    JPanel answerPanel = new JPanel(new BorderLayout());
                    answerPanel.setBorder(BorderFactory.createEmptyBorder(2, 5, 2, 5));
                    
                    String answerText = entry.getKey();
                    boolean isCorrect = entry.getValue();
                    
                    JLabel answerLabel = new JLabel(answerText);
                    if (isCorrect) {
                        answerLabel.setForeground(Color.GREEN.darker());
                        answerLabel.setText(answerText + " (Correct)");
                    }
                    
                    answerPanel.add(answerLabel, BorderLayout.CENTER);
                    ansListPanel.add(answerPanel);
                    ansListPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading answers", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        ansListPanel.add(Box.createVerticalGlue());
        ansListPanel.revalidate();
        ansListPanel.repaint();
    }
    
    private void loadExamData(int examId) {
        try {
            this.currentExamId = examId;
            System.out.println("Loading exam data for ID: " + examId);
            // Fetch exam details from the database
            ResultSet rs = eController.getExam(examId);

            if (rs.next()) {
                System.out.println("Exam ID: " + rs.getInt("examID"));
                // Fill exam title
                examTitleTF.setText(rs.getString("examTitle"));

                // Fill exam tags
                mDateCreatedTF.setText(rs.getString("dateCreated"));
                String dateAdmin = rs.getString("lastUsed");
//                mDateAdminTF.setText(dateAdmin == null ? "Never" : dateAdmin);
                mDateEditedTF.setText(rs.getString("lastEdited"));
                // mPerfTF.setText(String.valueOf(rs.getInt("performanceMetric")));
            
                // Populate questions
                ResultSet examQuestions = eController.getQuestionsFromExam(examId);
                populateMListPanels(examQuestions, "SELECT * FROM questions WHERE 1=1");
            } else {
                JOptionPane.showMessageDialog(this, "Exam not found", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to load exam data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ansListPanel;
    private javax.swing.JPanel ansPanel;
    private javax.swing.JCheckBox bAdminNoCB;
    private javax.swing.JPanel bAdminPanel;
    private javax.swing.JCheckBox bAdminYesCB;
    private javax.swing.ButtonGroup bButtonGroup;
    private javax.swing.JComboBox<String> bCourseComboBox;
    private javax.swing.JPanel bCoursePanel;
    private javax.swing.JPanel bFilterPanel;
    private javax.swing.JScrollPane bFilterScrollTab;
    private javax.swing.JCheckBox bGradedNoCB;
    private javax.swing.JPanel bGradedPanel;
    private javax.swing.JCheckBox bGradedYesCB;
    private javax.swing.JPanel bOrganizePanel;
    private javax.swing.JTabbedPane bOrganizeTabbedPane;
    private javax.swing.JPanel bResultsPanel;
    private javax.swing.JScrollPane bResultsScrollPane;
    private javax.swing.JButton bSearchButton;
    private javax.swing.JPanel bSearchPanel;
    private javax.swing.JTextField bSearchTF;
    private javax.swing.JRadioButton bSortRB1;
    private javax.swing.JRadioButton bSortRB2;
    private javax.swing.JRadioButton bSortRB3;
    private javax.swing.JRadioButton bSortRB4;
    private javax.swing.JRadioButton bSortRB5;
    private javax.swing.JRadioButton bSortRB6;
    private javax.swing.JRadioButton bSortRB7;
    private javax.swing.JPanel bSortTab;
    private javax.swing.JPanel browseTab;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel examPanel;
    private javax.swing.JTextField examTitleTF;
    private javax.swing.JLabel examsLabel;
    private javax.swing.JTabbedPane examsTabbedPane;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton genButton;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JButton helpButton;
    private javax.swing.JPanel mAddedPanel;
    private javax.swing.JScrollPane mAddedScrollTab;
    private javax.swing.ButtonGroup mButtonGroup;
    private javax.swing.JComboBox<String> mCourseComboBox;
    private javax.swing.JPanel mCoursePanel;
    private javax.swing.JLabel mDateAdminLabel;
    private javax.swing.JSpinner mDateAdminSpinner;
    private javax.swing.JLabel mDateCreatedLabel;
    private javax.swing.JFormattedTextField mDateCreatedTF;
    private javax.swing.JLabel mDateEditedLabel;
    private javax.swing.JFormattedTextField mDateEditedTF;
    private javax.swing.JCheckBox mDiffEasyCB;
    private javax.swing.JCheckBox mDiffHardCB;
    private javax.swing.JCheckBox mDiffMedCB;
    private javax.swing.JPanel mDifficultyPanel;
    private javax.swing.JComboBox<String> mExamCourseComboBox;
    private javax.swing.JLabel mExamCourseLabel;
    private javax.swing.JPanel mFilterPanel;
    private javax.swing.JScrollPane mFilterScrollTab;
    private javax.swing.JTabbedPane mOrganizePanel;
    private javax.swing.JLabel mQNumberLabel;
    private javax.swing.JFormattedTextField mQNumberTF;
    private javax.swing.JRadioButton mSortRB1;
    private javax.swing.JRadioButton mSortRB10;
    private javax.swing.JRadioButton mSortRB11;
    private javax.swing.JRadioButton mSortRB2;
    private javax.swing.JRadioButton mSortRB3;
    private javax.swing.JRadioButton mSortRB4;
    private javax.swing.JRadioButton mSortRB5;
    private javax.swing.JRadioButton mSortRB6;
    private javax.swing.JRadioButton mSortRB7;
    private javax.swing.JRadioButton mSortRB8;
    private javax.swing.JRadioButton mSortRB9;
    private javax.swing.JPanel mSortTab;
    private javax.swing.JComboBox<String> mSubtopicComboBox;
    private javax.swing.JPanel mSubtopicPanel;
    private javax.swing.JPanel mTagsTab;
    private javax.swing.JComboBox<String> mTopicComboBox;
    private javax.swing.JPanel mTopicPanel;
    private javax.swing.JCheckBox mUsedNoCB;
    private javax.swing.JPanel mUsedPanel;
    private javax.swing.JCheckBox mUsedYesCB;
    private javax.swing.JPanel manageTab;
    private javax.swing.JButton newButton;
    private javax.swing.JPanel qResultsPanel;
    private javax.swing.JScrollPane qResultsScrollPane;
    private javax.swing.JButton qSearchButton;
    private javax.swing.JPanel qSearchPanel;
    private javax.swing.JTextField qSearchTF;
    private javax.swing.JPanel qSelectPanel;
    private javax.swing.JPanel questionsPanel;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
