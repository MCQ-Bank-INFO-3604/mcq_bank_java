/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.example.views;

import javax.swing.*;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import com.example.controllers.CoursesController;
import com.example.controllers.QuestionController;
import com.example.controllers.SubtopicsController;
import com.example.controllers.TopicsController;
import java.awt.*;
import java.awt.event.MouseListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * @author Rian Ramdin
 */
public class Questions extends javax.swing.JPanel {
    private QuestionController qController = new QuestionController();
    
    private HashMap<String, Integer> courseCodeToIDMap = new HashMap<>();
    private CoursesController cController = new CoursesController();
    
    private HashMap<String, Integer> topicNameToIDMap = new HashMap<>();
    private TopicsController tController = new TopicsController();
    
    private HashMap<String, Integer> subtopicNameToIDMap = new HashMap<>();
    private SubtopicsController sController = new SubtopicsController();
    
    private Integer currentQuestionId = null;
    private JPanel lastHighlightedPanel = null;
    
    private static final String DEFAULT_ALL_OPTION = "--All--";
    private static final String DEFAULT_NONE_OPTION = "--None--";
    
    public Questions() {
        initComponents();

        // Configure scrolling speed
        JScrollBar verticalScrollBar = resultsScrollPane.getVerticalScrollBar();
        verticalScrollBar.setUnitIncrement(16);  // Faster scrolling

        populateDropdowns();
        setupBrowseDropdownListeners();
        setupManageDropdownListeners();

        populateResultsPanel(qController.getQuestionsWithFilter()); // Populate the panel with data from the database
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ansButtonGroup = new javax.swing.ButtonGroup();
        sortButtonGroup = new javax.swing.ButtonGroup();
        headerPanel = new javax.swing.JPanel();
        returnButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        questionsLabel = new javax.swing.JLabel();
        questionsTabbedPane = new javax.swing.JTabbedPane();
        manageScrollTab = new javax.swing.JScrollPane();
        manageScrollContentPanel = new javax.swing.JPanel();
        manageControlsPanel = new javax.swing.JPanel();
        newButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        manageQuestionPanel = new javax.swing.JPanel();
        questionTF = new javax.swing.JTextField();
        qImageCB = new javax.swing.JCheckBox();
        qImageButton = new javax.swing.JButton();
        imagePathTF = new javax.swing.JTextField();
        manageAnswersPanel = new javax.swing.JPanel();
        ansRadioButton1 = new javax.swing.JRadioButton();
        ansTF1 = new javax.swing.JTextField();
        ansImageCB1 = new javax.swing.JCheckBox();
        ansImageButton1 = new javax.swing.JButton();
        ansRadioButton2 = new javax.swing.JRadioButton();
        ansTF2 = new javax.swing.JTextField();
        ansImageCB2 = new javax.swing.JCheckBox();
        ansImageButton2 = new javax.swing.JButton();
        ansRadioButton3 = new javax.swing.JRadioButton();
        ansTF3 = new javax.swing.JTextField();
        ansImageCB3 = new javax.swing.JCheckBox();
        ansImageButton3 = new javax.swing.JButton();
        ansRadioButton4 = new javax.swing.JRadioButton();
        ansTF4 = new javax.swing.JTextField();
        ansImageCB4 = new javax.swing.JCheckBox();
        ansImageButton4 = new javax.swing.JButton();
        manageTagsPanel = new javax.swing.JPanel();
        tagsEditablePanel = new javax.swing.JPanel();
        courseLabel = new javax.swing.JLabel();
        courseComboBox = new javax.swing.JComboBox<>();
        topicLabel = new javax.swing.JLabel();
        topicComboBox = new javax.swing.JComboBox<>();
        subtopicLabel = new javax.swing.JLabel();
        subtopicComboBox = new javax.swing.JComboBox<>();
        difficultyLabel = new javax.swing.JLabel();
        difficultyComboBox = new javax.swing.JComboBox<>();
        tagsFiller = new javax.swing.Box.Filler(new java.awt.Dimension(40, 100), new java.awt.Dimension(40, 100), new java.awt.Dimension(40, 100));
        tagsNonEditablePanel = new javax.swing.JPanel();
        dateCreatedLabel = new javax.swing.JLabel();
        dateCreatedTF = new javax.swing.JTextField();
        dateEditedLabel = new javax.swing.JLabel();
        dateEditedTF = new javax.swing.JTextField();
        dateUsedLabel = new javax.swing.JLabel();
        dateUsedTF = new javax.swing.JTextField();
        usedCountLabel = new javax.swing.JLabel();
        usedCountTF = new javax.swing.JTextField();
        perfLabel = new javax.swing.JLabel();
        perfTF = new javax.swing.JTextField();
        browseTab = new javax.swing.JPanel();
        bOrganizeTabbedPane = new javax.swing.JTabbedPane();
        bFilterScrollTab = new javax.swing.JScrollPane();
        bFilterPanel = new javax.swing.JPanel();
        bUsedPanel = new javax.swing.JPanel();
        bUsedYesCB = new javax.swing.JCheckBox();
        bUsedNoCB = new javax.swing.JCheckBox();
        bDifficultyPanel = new javax.swing.JPanel();
        bDiffEasyCb = new javax.swing.JCheckBox();
        bDiffMedCB = new javax.swing.JCheckBox();
        bDiffHardCB = new javax.swing.JCheckBox();
        bCoursePanel = new javax.swing.JPanel();
        bCourseComboBox = new javax.swing.JComboBox<>();
        bTopicPanel = new javax.swing.JPanel();
        bTopicComboBox = new javax.swing.JComboBox<>();
        bSubtopicPanel = new javax.swing.JPanel();
        bSubtopicComboBox = new javax.swing.JComboBox<>();
        bSortTab = new javax.swing.JPanel();
        sortRB1 = new javax.swing.JRadioButton();
        sortRB2 = new javax.swing.JRadioButton();
        sortRB3 = new javax.swing.JRadioButton();
        sortRB4 = new javax.swing.JRadioButton();
        sortRB5 = new javax.swing.JRadioButton();
        sortRB6 = new javax.swing.JRadioButton();
        sortRB7 = new javax.swing.JRadioButton();
        sortRB8 = new javax.swing.JRadioButton();
        sortRB9 = new javax.swing.JRadioButton();
        sortRB10 = new javax.swing.JRadioButton();
        sortRB11 = new javax.swing.JRadioButton();
        searchPanel = new javax.swing.JPanel();
        searchTF = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        headerPanel.setLayout(new java.awt.BorderLayout());

        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });
        headerPanel.add(returnButton, java.awt.BorderLayout.LINE_START);

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        headerPanel.add(helpButton, java.awt.BorderLayout.LINE_END);

        questionsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        questionsLabel.setText("Questions");
        headerPanel.add(questionsLabel, java.awt.BorderLayout.CENTER);

        add(headerPanel, java.awt.BorderLayout.PAGE_START);

        manageControlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Controls"));

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        manageControlsPanel.add(newButton);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        manageControlsPanel.add(saveButton);

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        manageControlsPanel.add(clearButton);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        manageControlsPanel.add(deleteButton);

        manageQuestionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Question"));

        questionTF.setText("Question Text");

        qImageButton.setText("Choose Image");

        imagePathTF.setEditable(false);
        imagePathTF.setText("Image Path");
        imagePathTF.setFocusable(false);

        javax.swing.GroupLayout manageQuestionPanelLayout = new javax.swing.GroupLayout(manageQuestionPanel);
        manageQuestionPanel.setLayout(manageQuestionPanelLayout);
        manageQuestionPanelLayout.setHorizontalGroup(
            manageQuestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageQuestionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageQuestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionTF)
                    .addGroup(manageQuestionPanelLayout.createSequentialGroup()
                        .addComponent(qImageCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qImageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imagePathTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        manageQuestionPanelLayout.setVerticalGroup(
            manageQuestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageQuestionPanelLayout.createSequentialGroup()
                .addComponent(questionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageQuestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(qImageCB)
                    .addComponent(qImageButton)
                    .addComponent(imagePathTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        manageAnswersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Answers"));

        ansButtonGroup.add(ansRadioButton1);

        ansTF1.setText("Answer 1");

        ansImageButton1.setText("Choose Image");

        ansButtonGroup.add(ansRadioButton2);

        ansTF2.setText("Answer 2");

        ansImageButton2.setText("Choose Image");

        ansButtonGroup.add(ansRadioButton3);

        ansTF3.setText("Answer 3");

        ansImageButton3.setText("Choose Image");

        ansButtonGroup.add(ansRadioButton4);

        ansTF4.setText("Answer 4");

        ansImageButton4.setText("Choose Image");

        javax.swing.GroupLayout manageAnswersPanelLayout = new javax.swing.GroupLayout(manageAnswersPanel);
        manageAnswersPanel.setLayout(manageAnswersPanelLayout);
        manageAnswersPanelLayout.setHorizontalGroup(
            manageAnswersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageAnswersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageAnswersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageAnswersPanelLayout.createSequentialGroup()
                        .addComponent(ansRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansTF1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansImageCB1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansImageButton1))
                    .addGroup(manageAnswersPanelLayout.createSequentialGroup()
                        .addComponent(ansRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansTF4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansImageCB4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansImageButton4))
                    .addGroup(manageAnswersPanelLayout.createSequentialGroup()
                        .addComponent(ansRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansTF2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansImageCB2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansImageButton2))
                    .addGroup(manageAnswersPanelLayout.createSequentialGroup()
                        .addComponent(ansRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansTF3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansImageCB3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ansImageButton3)))
                .addContainerGap())
        );
        manageAnswersPanelLayout.setVerticalGroup(
            manageAnswersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageAnswersPanelLayout.createSequentialGroup()
                .addGroup(manageAnswersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ansRadioButton1)
                    .addComponent(ansTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ansImageButton1)
                    .addComponent(ansImageCB1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageAnswersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ansRadioButton2)
                    .addComponent(ansTF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ansImageButton2)
                    .addComponent(ansImageCB2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageAnswersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ansRadioButton3)
                    .addComponent(ansTF3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ansImageButton3)
                    .addComponent(ansImageCB3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageAnswersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ansRadioButton4)
                    .addComponent(ansTF4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ansImageButton4)
                    .addComponent(ansImageCB4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        manageTagsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tags"));

        courseLabel.setText("Course:");

        courseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "course1", "course2", "course3", "course4" }));

        topicLabel.setText("Topic:");

        topicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "topic1", "topic2", "topic3", "topic4" }));

        subtopicLabel.setText("Subtopic:");

        subtopicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "subtopic1", "subtopic2", "subtopic3", "subtopic4" }));

        difficultyLabel.setText("Difficulty:");

        difficultyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Easy", "Medium", "Hard" }));

        javax.swing.GroupLayout tagsEditablePanelLayout = new javax.swing.GroupLayout(tagsEditablePanel);
        tagsEditablePanel.setLayout(tagsEditablePanelLayout);
        tagsEditablePanelLayout.setHorizontalGroup(
            tagsEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tagsEditablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tagsEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subtopicLabel)
                    .addComponent(courseLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(topicLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(difficultyLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tagsEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(courseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subtopicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(difficultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tagsEditablePanelLayout.setVerticalGroup(
            tagsEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tagsEditablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tagsEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseLabel)
                    .addComponent(courseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tagsEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topicLabel)
                    .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tagsEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subtopicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subtopicLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tagsEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(difficultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(difficultyLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dateCreatedLabel.setText("Date Created:");

        dateCreatedTF.setEditable(false);
        dateCreatedTF.setText("--New--");
        dateCreatedTF.setFocusable(false);

        dateEditedLabel.setText("Last Edited:");

        dateEditedTF.setEditable(false);
        dateEditedTF.setText("--New--");
        dateEditedTF.setFocusable(false);

        dateUsedLabel.setText("Last Used:");

        dateUsedTF.setEditable(false);
        dateUsedTF.setText("Never");
        dateUsedTF.setFocusable(false);

        usedCountLabel.setText("Times Used:");

        usedCountTF.setEditable(false);
        usedCountTF.setText("0");
        usedCountTF.setFocusable(false);

        perfLabel.setText("Performance:");

        perfTF.setEditable(false);
        perfTF.setText("0");
        perfTF.setFocusable(false);

        javax.swing.GroupLayout tagsNonEditablePanelLayout = new javax.swing.GroupLayout(tagsNonEditablePanel);
        tagsNonEditablePanel.setLayout(tagsNonEditablePanelLayout);
        tagsNonEditablePanelLayout.setHorizontalGroup(
            tagsNonEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tagsNonEditablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tagsNonEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usedCountLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(perfLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateUsedLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateEditedLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateCreatedLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tagsNonEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateCreatedTF)
                    .addComponent(dateEditedTF)
                    .addComponent(dateUsedTF)
                    .addComponent(usedCountTF)
                    .addComponent(perfTF, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tagsNonEditablePanelLayout.setVerticalGroup(
            tagsNonEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tagsNonEditablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tagsNonEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateCreatedLabel)
                    .addComponent(dateCreatedTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tagsNonEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateEditedLabel)
                    .addComponent(dateEditedTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tagsNonEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateUsedLabel)
                    .addComponent(dateUsedTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tagsNonEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usedCountLabel)
                    .addComponent(usedCountTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tagsNonEditablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(perfLabel)
                    .addComponent(perfTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout manageTagsPanelLayout = new javax.swing.GroupLayout(manageTagsPanel);
        manageTagsPanel.setLayout(manageTagsPanelLayout);
        manageTagsPanelLayout.setHorizontalGroup(
            manageTagsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageTagsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tagsEditablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tagsFiller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tagsNonEditablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        manageTagsPanelLayout.setVerticalGroup(
            manageTagsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageTagsPanelLayout.createSequentialGroup()
                .addGroup(manageTagsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tagsEditablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tagsFiller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tagsNonEditablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout manageScrollContentPanelLayout = new javax.swing.GroupLayout(manageScrollContentPanel);
        manageScrollContentPanel.setLayout(manageScrollContentPanelLayout);
        manageScrollContentPanelLayout.setHorizontalGroup(
            manageScrollContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageScrollContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageScrollContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageTagsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manageControlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manageQuestionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manageAnswersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        manageScrollContentPanelLayout.setVerticalGroup(
            manageScrollContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageScrollContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manageControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manageQuestionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manageAnswersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manageTagsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        manageScrollTab.setViewportView(manageScrollContentPanel);

        questionsTabbedPane.addTab("Manage", manageScrollTab);

        bFilterScrollTab.setBorder(null);

        bUsedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Used"));

        bUsedYesCB.setText("Yes");

        bUsedNoCB.setText("No");

        javax.swing.GroupLayout bUsedPanelLayout = new javax.swing.GroupLayout(bUsedPanel);
        bUsedPanel.setLayout(bUsedPanelLayout);
        bUsedPanelLayout.setHorizontalGroup(
            bUsedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bUsedPanelLayout.createSequentialGroup()
                .addGroup(bUsedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bUsedYesCB)
                    .addComponent(bUsedNoCB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bUsedPanelLayout.setVerticalGroup(
            bUsedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bUsedPanelLayout.createSequentialGroup()
                .addComponent(bUsedYesCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bUsedNoCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bDifficultyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Difficulty"));

        bDiffEasyCb.setText("Easy");

        bDiffMedCB.setText("Medium");

        bDiffHardCB.setText("Hard");

        javax.swing.GroupLayout bDifficultyPanelLayout = new javax.swing.GroupLayout(bDifficultyPanel);
        bDifficultyPanel.setLayout(bDifficultyPanelLayout);
        bDifficultyPanelLayout.setHorizontalGroup(
            bDifficultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bDifficultyPanelLayout.createSequentialGroup()
                .addGroup(bDifficultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bDiffEasyCb)
                    .addComponent(bDiffMedCB)
                    .addComponent(bDiffHardCB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bDifficultyPanelLayout.setVerticalGroup(
            bDifficultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bDifficultyPanelLayout.createSequentialGroup()
                .addComponent(bDiffEasyCb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bDiffMedCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bDiffHardCB)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        bCoursePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Course"));

        bCourseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course 1", "Course 2", "Course 3", "Course 4" }));

        javax.swing.GroupLayout bCoursePanelLayout = new javax.swing.GroupLayout(bCoursePanel);
        bCoursePanel.setLayout(bCoursePanelLayout);
        bCoursePanelLayout.setHorizontalGroup(
            bCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bCourseComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        bCoursePanelLayout.setVerticalGroup(
            bCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bTopicPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Topic"));

        bTopicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Topic 1", "Topic 2", "Topic 3", "Topic 4" }));

        javax.swing.GroupLayout bTopicPanelLayout = new javax.swing.GroupLayout(bTopicPanel);
        bTopicPanel.setLayout(bTopicPanelLayout);
        bTopicPanelLayout.setHorizontalGroup(
            bTopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bTopicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bTopicComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        bTopicPanelLayout.setVerticalGroup(
            bTopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bTopicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bTopicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bSubtopicPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sub-Topic"));

        bSubtopicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sub-Topic 1", "Sub-Topic 2", "Sub-Topic 3", "Sub-Topic 4" }));

        javax.swing.GroupLayout bSubtopicPanelLayout = new javax.swing.GroupLayout(bSubtopicPanel);
        bSubtopicPanel.setLayout(bSubtopicPanelLayout);
        bSubtopicPanelLayout.setHorizontalGroup(
            bSubtopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bSubtopicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bSubtopicComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        bSubtopicPanelLayout.setVerticalGroup(
            bSubtopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bSubtopicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bSubtopicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout bFilterPanelLayout = new javax.swing.GroupLayout(bFilterPanel);
        bFilterPanel.setLayout(bFilterPanelLayout);
        bFilterPanelLayout.setHorizontalGroup(
            bFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bSubtopicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bCoursePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bDifficultyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bUsedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bTopicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        bFilterPanelLayout.setVerticalGroup(
            bFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bUsedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bDifficultyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCoursePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bTopicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSubtopicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bFilterScrollTab.setViewportView(bFilterPanel);

        bOrganizeTabbedPane.addTab("Filter", bFilterScrollTab);

        sortButtonGroup.add(sortRB1);
        sortRB1.setSelected(true);
        sortRB1.setText("Default");

        sortButtonGroup.add(sortRB2);
        sortRB2.setText("Images First");

        sortButtonGroup.add(sortRB3);
        sortRB3.setText("Text First");

        sortButtonGroup.add(sortRB4);
        sortRB4.setText("Last Used (Oldest First)");

        sortButtonGroup.add(sortRB5);
        sortRB5.setText("Last Used (Newest First)");

        sortButtonGroup.add(sortRB6);
        sortRB6.setText("Date Created (Oldest First)");

        sortButtonGroup.add(sortRB7);
        sortRB7.setText("Date Created (Newest First)");

        sortButtonGroup.add(sortRB8);
        sortRB8.setText("Times Used (Least First)");

        sortButtonGroup.add(sortRB9);
        sortRB9.setText("Times Used (Most First)");

        sortButtonGroup.add(sortRB10);
        sortRB10.setText("Difficulty (Easy First)");

        sortButtonGroup.add(sortRB11);
        sortRB11.setText("Difficulty (Hard First)");

        javax.swing.GroupLayout bSortTabLayout = new javax.swing.GroupLayout(bSortTab);
        bSortTab.setLayout(bSortTabLayout);
        bSortTabLayout.setHorizontalGroup(
            bSortTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bSortTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bSortTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortRB1)
                    .addComponent(sortRB2)
                    .addComponent(sortRB3)
                    .addComponent(sortRB4)
                    .addComponent(sortRB5)
                    .addComponent(sortRB6)
                    .addComponent(sortRB7)
                    .addComponent(sortRB8)
                    .addComponent(sortRB9)
                    .addComponent(sortRB10)
                    .addComponent(sortRB11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bSortTabLayout.setVerticalGroup(
            bSortTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bSortTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sortRB1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRB11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bOrganizeTabbedPane.addTab("Sort", bSortTab);

        searchPanel.setLayout(new java.awt.BorderLayout());

        searchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTFActionPerformed(evt);
            }
        });
        searchPanel.add(searchTF, java.awt.BorderLayout.CENTER);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        searchPanel.add(searchButton, java.awt.BorderLayout.LINE_END);

        resultsPanel.setPreferredSize(null);

        javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );

        resultsScrollPane.setViewportView(resultsPanel);

        javax.swing.GroupLayout browseTabLayout = new javax.swing.GroupLayout(browseTab);
        browseTab.setLayout(browseTabLayout);
        browseTabLayout.setHorizontalGroup(
            browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultsScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bOrganizeTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        browseTabLayout.setVerticalGroup(
            browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bOrganizeTabbedPane)
                    .addGroup(browseTabLayout.createSequentialGroup()
                        .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultsScrollPane)))
                .addContainerGap())
        );

        questionsTabbedPane.addTab("Browse", browseTab);

        add(questionsTabbedPane, java.awt.BorderLayout.CENTER);
        questionsTabbedPane.getAccessibleContext().setAccessibleName("questionsTabs");
    }// </editor-fold>//GEN-END:initComponents

    private void searchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTFActionPerformed
        // TODO add your handling code here:
        String sqlQuery = buildQuestionQuery();
        ResultSet filteredResults = qController.getQuestionsWithFilter(sqlQuery);
        populateResultsPanel(filteredResults);
    }//GEN-LAST:event_searchTFActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        // TODO add your handling code here:
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        CardLayout layout = (CardLayout) frame.getContentPane().getLayout();
        layout.show(frame.getContentPane(), "Home");
    }//GEN-LAST:event_returnButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
        new Help(null, true, 2);
    }//GEN-LAST:event_helpButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        searchTFActionPerformed(evt);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        // TODO add your handling code here:
        // Clear all fields and reset state
        currentQuestionId = null;
        clearFields();
        
        // Set default values
        difficultyComboBox.setSelectedIndex(0);
        dateCreatedTF.setText("--New--");
        dateEditedTF.setText("--New--");
        dateUsedTF.setText("Never");
        usedCountTF.setText("0");
        perfTF.setText("0");
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        // Validate required fields
        if (questionTF.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Question text is required", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        if (ansTF1.getText().trim().isEmpty() || ansTF2.getText().trim().isEmpty() ||
            ansTF3.getText().trim().isEmpty() || ansTF4.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "All answer fields are required", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        if (!ansRadioButton1.isSelected() && !ansRadioButton2.isSelected() &&
            !ansRadioButton3.isSelected() && !ansRadioButton4.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please select the correct answer", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        // Get the correct answer
        String correctAnswer = "";
        if (ansRadioButton1.isSelected()) correctAnswer = ansTF1.getText();
        else if (ansRadioButton2.isSelected()) correctAnswer = ansTF2.getText();
        else if (ansRadioButton3.isSelected()) correctAnswer = ansTF3.getText();
        else if (ansRadioButton4.isSelected()) correctAnswer = ansTF4.getText();
    
        // Prepare question data
        String question = questionTF.getText();
    
        // Initialize list to hold wrong answers
        ArrayList<String> wrongAnswers = new ArrayList<>();
    
        // Add all answers that aren't the correct one
        if (!ansRadioButton1.isSelected()) wrongAnswers.add(ansTF1.getText());
        if (!ansRadioButton2.isSelected()) wrongAnswers.add(ansTF2.getText());
        if (!ansRadioButton3.isSelected()) wrongAnswers.add(ansTF3.getText());
        if (!ansRadioButton4.isSelected()) wrongAnswers.add(ansTF4.getText());
    
        // Ensure we have exactly 3 wrong answers (in case of unexpected state)
        while (wrongAnswers.size() < 3) {
            wrongAnswers.add(""); // Add empty strings if somehow we don't have 3 wrong answers
        }
    
        String wrong1 = wrongAnswers.get(0);
        String wrong2 = wrongAnswers.get(1);
        String wrong3 = wrongAnswers.get(2);
    
        String courseCode = (String) courseComboBox.getSelectedItem();
        Integer courseID = courseCodeToIDMap.get(courseCode); // Get the courseID from the map
        String topicName = (String) topicComboBox.getSelectedItem();
        Integer topicID = topicNameToIDMap.get(topicName); // Get the topicID from the map
        String subtopicName = (String) subtopicComboBox.getSelectedItem();
        Integer subtopicID = subtopicNameToIDMap.get(subtopicName); // Get the subtopicID from the map
        Float difficulty = 0.0f; // Default difficulty value
        Float performance = 0.0f; // Default performance value
        Float discrimination = 0.0f; // Default discrimination value
    
        //TODO: Handle image paths and checkboxes
        Boolean hasImage = false; // Default value for image presence
        String qImagePath = ""; // Placeholder for question image path
        String cAnsImagePath = ""; // Placeholder for correct answer image path
        String wAns1ImagePath = ""; // Placeholder for wrong answer 1 image path
        String wAns2ImagePath = ""; // Placeholder for wrong answer 2 image path
        String wAns3ImagePath = ""; // Placeholder for wrong answer 3 image path
        String comment = ""; // Placeholder for comment
        try {
            if (currentQuestionId == null) {
                // Create new question
                boolean success = qController.insertQuestion(
                    question, correctAnswer, wrong1, wrong2, wrong3,
                    courseID, topicID, subtopicID, difficulty, performance, discrimination,
                    hasImage, qImagePath, cAnsImagePath, wAns1ImagePath, wAns2ImagePath,
                    wAns3ImagePath, comment
                );
    
                if (success) {
                    JOptionPane.showMessageDialog(this, "Question created successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    // Refresh the results panel
                    populateResultsPanel(qController.getQuestionsWithFilter());
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to create question", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Update existing question
                boolean success = qController.editQuestion(
                    currentQuestionId,
                    question, correctAnswer, wrong1, wrong2, wrong3,
                    courseID, topicID, subtopicID, difficulty, performance, discrimination,
                    hasImage, qImagePath, cAnsImagePath, wAns1ImagePath, wAns2ImagePath,
                    wAns3ImagePath, comment
                );
    
                if (success) {
                    JOptionPane.showMessageDialog(this, "Question updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    // Refresh the results panel
                    populateResultsPanel(qController.getQuestionsWithFilter());
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update question", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving question: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        clearFields();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (currentQuestionId == null) {
            JOptionPane.showMessageDialog(this, "No question selected to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to delete this question?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                boolean success = qController.deleteQuestion(currentQuestionId);
                if (success) {
                    JOptionPane.showMessageDialog(this, "Question deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    currentQuestionId = null;
                    clearFields();
                    // Refresh the results panel
                    populateResultsPanel(qController.getQuestionsWithFilter());
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete question", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting question: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    private void clearFields() {
        // Clear text fields
        questionTF.setText("");
        ansTF1.setText("");
        ansTF2.setText("");
        ansTF3.setText("");
        ansTF4.setText("");
        imagePathTF.setText("Image Path");
        
        // Clear checkboxes
        qImageCB.setSelected(false);
        ansImageCB1.setSelected(false);
        ansImageCB2.setSelected(false);
        ansImageCB3.setSelected(false);
        ansImageCB4.setSelected(false);
        
        // Clear radio buttons
        ansButtonGroup.clearSelection();
        
        // Reset dropdowns to first item
        courseComboBox.setSelectedIndex(0);
        topicComboBox.setSelectedIndex(0);
        subtopicComboBox.setSelectedIndex(0);
        difficultyComboBox.setSelectedIndex(0);
    }

    private String buildQuestionQuery() {
        StringBuilder sql = new StringBuilder("SELECT * FROM questions WHERE 1=1");
        
        // Apply filters
        if (bUsedYesCB.isSelected() && !bUsedNoCB.isSelected()) {
            sql.append(" AND timesUsed > 0");
        } else if (bUsedNoCB.isSelected() && !bUsedYesCB.isSelected()) {
            sql.append(" AND timesUsed = 0");
        }
        
        // Handle multiple difficulty selections
        ArrayList<String> selectedDifficulties = new ArrayList<>();
        if (bDiffEasyCb.isSelected()) {
            selectedDifficulties.add("'Easy'");
        }
        if (bDiffMedCB.isSelected()) {
            selectedDifficulties.add("'Medium'");
        }
        if (bDiffHardCB.isSelected()) {
            selectedDifficulties.add("'Hard'");
        }
        
        if (!selectedDifficulties.isEmpty()) {
            sql.append(" AND difficulty IN (")
               .append(String.join(", ", selectedDifficulties))
               .append(")");
        }
        
        // Handle course filter (skip if "--All--" is selected)
        String courseFilter = (String)bCourseComboBox.getSelectedItem();
        if (courseFilter != null && !courseFilter.isEmpty() && !courseFilter.equals("--All--")) {
            Integer courseID = courseCodeToIDMap.get(courseFilter); // Get the courseID from the map
            sql.append(" AND course = '").append(courseID).append("'");
        }
        
        // Handle topic filter (skip if "--All--" is selected)
        String topicFilter = (String)bTopicComboBox.getSelectedItem();
        if (topicFilter != null && !topicFilter.isEmpty() && !topicFilter.equals("--All--")) {
            Integer topicID = topicNameToIDMap.get(topicFilter); // Get the topicID from the map
            sql.append(" AND topic = '").append(topicID).append("'");
        }
        
        // Handle subtopic filter (skip if "--All--" is selected)
        String subtopicFilter = (String)bSubtopicComboBox.getSelectedItem();
        if (subtopicFilter != null && !subtopicFilter.isEmpty() && !subtopicFilter.equals("--All--")) {
            Integer subtopicID = subtopicNameToIDMap.get(subtopicFilter); // Get the subtopicID from the map
            sql.append(" AND subTopic = '").append(subtopicID).append("'");
        }
        
        // Apply search text
        String searchText = searchTF.getText().trim();
        if (!searchText.isEmpty()) {
            sql.append(" AND question LIKE '%").append(searchText).append("%'");
        }
        
        // Apply sorting
        String sortOption = getSelectedSortOption();
        switch (sortOption) {
            case "ImagesFirst" -> sql.append(" ORDER BY hasImage DESC");
            case "TextFirst" -> sql.append(" ORDER BY hasImage ASC");
            case "LastUsedOldestFirst" -> sql.append(" ORDER BY lastUsed ASC");
            case "LastUsedNewestFirst" -> sql.append(" ORDER BY lastUsed DESC");
            case "DateCreatedOldestFirst" -> sql.append(" ORDER BY dateCreated ASC");
            case "DateCreatedNewestFirst" -> sql.append(" ORDER BY dateCreated DESC");
            case "TimesUsedLeastFirst" -> sql.append(" ORDER BY timesUsed ASC");
            case "TimesUsedMostFirst" -> sql.append(" ORDER BY timesUsed DESC");
            case "DifficultyEasyFirst" -> sql.append(" ORDER BY CASE difficulty WHEN 'Easy' THEN 1 WHEN 'Medium' THEN 2 WHEN 'Hard' THEN 3 END");
            case "DifficultyHardFirst" -> sql.append(" ORDER BY CASE difficulty WHEN 'Hard' THEN 1 WHEN 'Medium' THEN 2 WHEN 'Easy' THEN 3 END");
            default -> sql.append(" ORDER BY questionID"); // Default sorting
        }
        
        return sql.toString();
    }
    
    private String getSelectedSortOption() {
        if (sortRB1.isSelected()) return "Default";
        if (sortRB2.isSelected()) return "ImagesFirst";
        if (sortRB3.isSelected()) return "TextFirst";
        if (sortRB4.isSelected()) return "LastUsedOldestFirst";
        if (sortRB5.isSelected()) return "LastUsedNewestFirst";
        if (sortRB6.isSelected()) return "DateCreatedOldestFirst";
        if (sortRB7.isSelected()) return "DateCreatedNewestFirst";
        if (sortRB8.isSelected()) return "TimesUsedLeastFirst";
        if (sortRB9.isSelected()) return "TimesUsedMostFirst";
        if (sortRB10.isSelected()) return "DifficultyEasyFirst";
        if (sortRB11.isSelected()) return "DifficultyHardFirst";
        return "Default"; // Fallback
    }

    private void populateResultsPanel(ResultSet rs) {
        // Clear the resultsPanel
        resultsPanel.removeAll();
        resultsPanel.setLayout(new BoxLayout(resultsPanel, BoxLayout.Y_AXIS));
        
        // Reset highlighted panel
        lastHighlightedPanel = null;

        try {
            while (rs != null && rs.next()) {
                // Create a panel for each question
                JPanel questionPanel = new JPanel(new BorderLayout());
                questionPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
                questionPanel.setOpaque(true); // Required for background color to show
                
                // Add question text as a label
                JLabel questionLabel = new JLabel(rs.getString("question"));
                questionPanel.add(questionLabel, BorderLayout.CENTER);
                
                // Make the panel clickable
                questionPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                questionPanel.addMouseListener((MouseListener) new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        // Remove highlight from previously selected panel
                        if (lastHighlightedPanel != null) {
                            lastHighlightedPanel.setBackground(null);
                            lastHighlightedPanel.repaint();
                        }
                        
                        // Highlight the clicked panel
                        questionPanel.setBackground(new Color(173, 216, 230)); // Light blue color
                        lastHighlightedPanel = questionPanel;
                    }
                });
                
                // Add a details button
                JButton detailsButton = new JButton("Details");
                int questionId = rs.getInt("questionID");
                detailsButton.putClientProperty("questionId", questionId);
                
                detailsButton.addActionListener(e -> {
                    // Remove highlight from previously selected panel
                    if (lastHighlightedPanel != null) {
                        lastHighlightedPanel.setBackground(null);
                        lastHighlightedPanel.repaint();
                    }
                    
                    // Highlight the clicked panel
                    questionPanel.setBackground(new Color(173, 216, 230)); // Light blue color
                    lastHighlightedPanel = questionPanel;
                    
                    questionsTabbedPane.setSelectedIndex(0); // Switch to Manage tab
                    loadQuestionData(questionId);
                });
                
                questionPanel.add(detailsButton, BorderLayout.EAST);
                resultsPanel.add(questionPanel);
                resultsPanel.add(Box.createRigidArea(new Dimension(0, 5)));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        resultsPanel.add(Box.createVerticalGlue());
        resultsPanel.revalidate();
        resultsPanel.repaint();
    }

    private void loadQuestionData(int questionId) {
        try {
            this.currentQuestionId = questionId;

            // Fetch question details from the database
            ResultSet rs = qController.getQuestion(questionId);
            
            if (rs.next()) {
                // Fill question text
                questionTF.setText(rs.getString("question"));
                
                // Fill answer fields (assuming 4 answers)
                ansTF1.setText(rs.getString("correctAnswer"));
                ansTF2.setText(rs.getString("wrongAnswer1"));
                ansTF3.setText(rs.getString("wrongAnswer2"));
                ansTF4.setText(rs.getString("wrongAnswer3"));
                
                // Set correct answer (assuming radio buttons)
                ansRadioButton1.setSelected(true);
                
                // Fill tags (course, topic, subtopic, difficulty)
                Integer courseID = rs.getInt("course");
                Integer topicID = rs.getInt("topic");
                Integer subtopicID = rs.getInt("subTopic");

                String courseCode = cController.getCourseCode(courseID);
                String topicName = tController.getTopicName(topicID);
                String subtopicName = sController.getSubtopicName(subtopicID);
                
                courseComboBox.setSelectedItem(courseCode);
                topicComboBox.setSelectedItem(topicName);
                subtopicComboBox.setSelectedItem(subtopicName);
                // difficultyComboBox.setSelectedItem(rs.getString("difficulty"));
                
                // Fill non-editable fields (dates, performance)
                dateCreatedTF.setText(rs.getString("dateCreated"));
                dateEditedTF.setText(rs.getString("lastEdited"));

                // Handle null lastUsed
                String lastUsed = rs.getString("lastUsed");
                dateUsedTF.setText(lastUsed == null ? "Never" : lastUsed);

                usedCountTF.setText(String.valueOf(rs.getInt("timesUsed")));
                // perfTF.setText(String.valueOf(rs.getInt("performanceMetric")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to load question data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateDropdowns() {
        // Clear existing items
        bCourseComboBox.removeAllItems();
        bTopicComboBox.removeAllItems();
        bSubtopicComboBox.removeAllItems();
        courseComboBox.removeAllItems();
        topicComboBox.removeAllItems();
        subtopicComboBox.removeAllItems();
        courseCodeToIDMap.clear();
        topicNameToIDMap.clear();
        subtopicNameToIDMap.clear();
    
        // Add default options
        bCourseComboBox.addItem(DEFAULT_ALL_OPTION);
        bTopicComboBox.addItem(DEFAULT_ALL_OPTION);
        bSubtopicComboBox.addItem(DEFAULT_ALL_OPTION);
        courseComboBox.addItem(DEFAULT_NONE_OPTION);
        topicComboBox.addItem(DEFAULT_NONE_OPTION);
        subtopicComboBox.addItem(DEFAULT_NONE_OPTION);
    
        // Get distinct values from database
        ArrayList<String[]> courses = cController.getAllCourses();
        
        // Populate course dropdowns
        for (String[] course : courses) {
            String courseCode = course[0];
            int courseID = Integer.parseInt(course[1]);
            bCourseComboBox.addItem(courseCode);
            courseComboBox.addItem(courseCode);
            courseCodeToIDMap.put(courseCode, courseID);
        }
    
        // Initially disable dependent dropdowns
        bTopicComboBox.setEnabled(false);
        bSubtopicComboBox.setEnabled(false);
        topicComboBox.setEnabled(false);
        subtopicComboBox.setEnabled(false);
    }

    private void setupBrowseDropdownListeners() {
        bCourseComboBox.addActionListener(e -> {
            String selectedCourse = (String) bCourseComboBox.getSelectedItem();
            if (DEFAULT_ALL_OPTION.equals(selectedCourse)) {
                bTopicComboBox.setEnabled(false);
                bSubtopicComboBox.setEnabled(false);
                bTopicComboBox.setSelectedItem(DEFAULT_ALL_OPTION);
                bSubtopicComboBox.setSelectedItem(DEFAULT_ALL_OPTION);
            } else {
                Integer courseID = courseCodeToIDMap.get(selectedCourse);
                bTopicComboBox.setEnabled(true);
                populateTopicsDropdown(bTopicComboBox, courseID, true);
            }
        });

        bTopicComboBox.addActionListener(e -> {
            String selectedTopic = (String) bTopicComboBox.getSelectedItem();
            if (DEFAULT_ALL_OPTION.equals(selectedTopic)) {
                bSubtopicComboBox.setEnabled(false);
                bSubtopicComboBox.setSelectedItem(DEFAULT_ALL_OPTION);
            } else {
                bSubtopicComboBox.setEnabled(true);
                populateSubtopicsDropdown(bSubtopicComboBox, selectedTopic, true);
            }
        });
    }

    private void setupManageDropdownListeners() {
        courseComboBox.addActionListener(e -> {
            String selectedCourse = (String) courseComboBox.getSelectedItem();
            if (DEFAULT_NONE_OPTION.equals(selectedCourse)) {
                topicComboBox.setEnabled(false);
                subtopicComboBox.setEnabled(false);
                topicComboBox.setSelectedItem(DEFAULT_NONE_OPTION);
                subtopicComboBox.setSelectedItem(DEFAULT_NONE_OPTION);
            } else {
                Integer courseID = courseCodeToIDMap.get(selectedCourse);
                topicComboBox.setEnabled(true);
                populateTopicsDropdown(topicComboBox, courseID, false);
            }
        });

        topicComboBox.addActionListener(e -> {
            String selectedTopic = (String) topicComboBox.getSelectedItem();
            if (DEFAULT_NONE_OPTION.equals(selectedTopic)) {
                subtopicComboBox.setEnabled(false);
                subtopicComboBox.setSelectedItem(DEFAULT_NONE_OPTION);
            } else {
                subtopicComboBox.setEnabled(true);
                populateSubtopicsDropdown(subtopicComboBox, selectedTopic, false);
            }
        });
    }

    private void populateTopicsDropdown(JComboBox<String> topicDropdown, Integer courseID, boolean includeAllOption) {
        topicDropdown.removeAllItems();
        if (includeAllOption) {
            topicDropdown.addItem(DEFAULT_ALL_OPTION);
        } else {
            topicDropdown.addItem(DEFAULT_NONE_OPTION);
        }

        ArrayList<String[]> topics = tController.getTopicsByCourse(courseID);
        for (String[] topic : topics) {
            String topicName = topic[0];
            topicDropdown.addItem(topicName);
            topicNameToIDMap.put(topicName, Integer.parseInt(topic[1])); // Map topicName to topicID
        }
    }

    private void populateSubtopicsDropdown(JComboBox<String> subtopicDropdown, String topicName, boolean includeAllOption) {
        subtopicDropdown.removeAllItems();
        if (includeAllOption) {
            subtopicDropdown.addItem(DEFAULT_ALL_OPTION);
        } else {
            subtopicDropdown.addItem(DEFAULT_NONE_OPTION);
        }

        // Get the topicID from the topicNameToIDMap
        Integer topicID = topicNameToIDMap.get(topicName);
        if (topicID == null) {
            System.err.println("Error: topicID is null for topicName: " + topicName);
            return; // Exit early if topicID is null
        }

        // Fetch subtopics using the topicID
        ArrayList<String[]> subtopics = sController.getSubtopicsByTopicID(topicID);
        for (String[] subtopic : subtopics) {
            String subtopicName = subtopic[0];
            subtopicDropdown.addItem(subtopicName);
            subtopicNameToIDMap.put(subtopicName, Integer.parseInt(subtopic[1])); // Map subtopicName to subtopicID
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ansButtonGroup;
    private javax.swing.JButton ansImageButton1;
    private javax.swing.JButton ansImageButton2;
    private javax.swing.JButton ansImageButton3;
    private javax.swing.JButton ansImageButton4;
    private javax.swing.JCheckBox ansImageCB1;
    private javax.swing.JCheckBox ansImageCB2;
    private javax.swing.JCheckBox ansImageCB3;
    private javax.swing.JCheckBox ansImageCB4;
    private javax.swing.JRadioButton ansRadioButton1;
    private javax.swing.JRadioButton ansRadioButton2;
    private javax.swing.JRadioButton ansRadioButton3;
    private javax.swing.JRadioButton ansRadioButton4;
    private javax.swing.JTextField ansTF1;
    private javax.swing.JTextField ansTF2;
    private javax.swing.JTextField ansTF3;
    private javax.swing.JTextField ansTF4;
    private javax.swing.JComboBox<String> bCourseComboBox;
    private javax.swing.JPanel bCoursePanel;
    private javax.swing.JCheckBox bDiffEasyCb;
    private javax.swing.JCheckBox bDiffHardCB;
    private javax.swing.JCheckBox bDiffMedCB;
    private javax.swing.JPanel bDifficultyPanel;
    private javax.swing.JPanel bFilterPanel;
    private javax.swing.JScrollPane bFilterScrollTab;
    private javax.swing.JTabbedPane bOrganizeTabbedPane;
    private javax.swing.JPanel bSortTab;
    private javax.swing.JComboBox<String> bSubtopicComboBox;
    private javax.swing.JPanel bSubtopicPanel;
    private javax.swing.JComboBox<String> bTopicComboBox;
    private javax.swing.JPanel bTopicPanel;
    private javax.swing.JCheckBox bUsedNoCB;
    private javax.swing.JPanel bUsedPanel;
    private javax.swing.JCheckBox bUsedYesCB;
    private javax.swing.JPanel browseTab;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> courseComboBox;
    private javax.swing.JLabel courseLabel;
    private javax.swing.JLabel dateCreatedLabel;
    private javax.swing.JTextField dateCreatedTF;
    private javax.swing.JLabel dateEditedLabel;
    private javax.swing.JTextField dateEditedTF;
    private javax.swing.JLabel dateUsedLabel;
    private javax.swing.JTextField dateUsedTF;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> difficultyComboBox;
    private javax.swing.JLabel difficultyLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JButton helpButton;
    private javax.swing.JTextField imagePathTF;
    private javax.swing.JPanel manageAnswersPanel;
    private javax.swing.JPanel manageControlsPanel;
    private javax.swing.JPanel manageQuestionPanel;
    private javax.swing.JPanel manageScrollContentPanel;
    private javax.swing.JScrollPane manageScrollTab;
    private javax.swing.JPanel manageTagsPanel;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel perfLabel;
    private javax.swing.JTextField perfTF;
    private javax.swing.JButton qImageButton;
    private javax.swing.JCheckBox qImageCB;
    private javax.swing.JTextField questionTF;
    private javax.swing.JLabel questionsLabel;
    private javax.swing.JTabbedPane questionsTabbedPane;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchTF;
    private javax.swing.ButtonGroup sortButtonGroup;
    private javax.swing.JRadioButton sortRB1;
    private javax.swing.JRadioButton sortRB10;
    private javax.swing.JRadioButton sortRB11;
    private javax.swing.JRadioButton sortRB2;
    private javax.swing.JRadioButton sortRB3;
    private javax.swing.JRadioButton sortRB4;
    private javax.swing.JRadioButton sortRB5;
    private javax.swing.JRadioButton sortRB6;
    private javax.swing.JRadioButton sortRB7;
    private javax.swing.JRadioButton sortRB8;
    private javax.swing.JRadioButton sortRB9;
    private javax.swing.JComboBox<String> subtopicComboBox;
    private javax.swing.JLabel subtopicLabel;
    private javax.swing.JPanel tagsEditablePanel;
    private javax.swing.Box.Filler tagsFiller;
    private javax.swing.JPanel tagsNonEditablePanel;
    private javax.swing.JComboBox<String> topicComboBox;
    private javax.swing.JLabel topicLabel;
    private javax.swing.JLabel usedCountLabel;
    private javax.swing.JTextField usedCountTF;
    // End of variables declaration//GEN-END:variables
}
