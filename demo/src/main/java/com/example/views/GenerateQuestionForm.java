/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.example.views;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;

import com.example.controllers.CoursesController;
import com.example.controllers.ExamController;
import com.example.controllers.QuestionController;
import com.example.controllers.SubtopicsController;
import com.example.controllers.TopicsController;

/**
 *
 * @author Michelle Khadan
 */
public class GenerateQuestionForm extends javax.swing.JDialog {
    private HashMap<String, Integer> courseCodeToIDMap = new HashMap<>();
    private CoursesController cController = new CoursesController();
    
    private HashMap<String, Integer> topicNameToIDMap = new HashMap<>();
    private TopicsController tController = new TopicsController();
    
    private HashMap<String, Integer> subtopicNameToIDMap = new HashMap<>();
    private SubtopicsController sController = new SubtopicsController();
    
    private static final String DEFAULT_ALL_OPTION = "--All--";

    private Integer currentExamId;
    /**
     * Creates new form GenerateQuestionForm
     */
    public GenerateQuestionForm(java.awt.Frame parent, boolean modal, Integer currentExamId) {
        super(parent, modal);
        this.currentExamId = currentExamId;
        initComponents();

        populateDropdowns();
        setupDropdownListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        contentPane = new javax.swing.JPanel();
        numLabel = new javax.swing.JLabel();
        numSpinner = new javax.swing.JSpinner();
        courseLabel = new javax.swing.JLabel();
        courseComboBox = new javax.swing.JComboBox<>();
        topicLabel = new javax.swing.JLabel();
        topicComboBox = new javax.swing.JComboBox<>();
        subtopicLabel = new javax.swing.JLabel();
        subtopicComboBox = new javax.swing.JComboBox<>();
        difficultyLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        genButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinner5 = new javax.swing.JSpinner();
        jSpinner6 = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generate Questions");
        setResizable(false);

        numLabel.setText("Number of Questions:");

        numSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        courseLabel.setText("Course:");

        courseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course 1", "Course 2", "Course 3", "Course 4" }));

        topicLabel.setText("Topic:");

        topicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Topic 1", "Topic 2", "Topic 3", "Topic 4" }));

        subtopicLabel.setText("Sub-Topic:");

        subtopicComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sub-Topic 1", "Sub-Topic 2", "Sub-Topic 3", "Sub-Topic 4" }));

        difficultyLabel.setText("Difficulty:");

        genButton.setText("Generate");
        genButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genButtonActionPerformed(evt);
            }
        });
        jPanel1.add(genButton);

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        jPanel1.add(helpButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton);

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.01f)));

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.01f)));

        jLabel1.setText("Performance");

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.01f)));

        jSpinner4.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.01f)));

        jLabel2.setText("Discrimination");

        jSpinner5.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.01f)));

        jSpinner6.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.01f)));

        javax.swing.GroupLayout contentPaneLayout = new javax.swing.GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(courseLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(courseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(numLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(topicLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(subtopicLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subtopicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(difficultyLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numLabel)
                    .addComponent(numSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseLabel)
                    .addComponent(courseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topicLabel)
                    .addComponent(topicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subtopicLabel)
                    .addComponent(subtopicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(difficultyLabel)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(contentPane, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
        new Help(null, true, 5);
    }//GEN-LAST:event_helpButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void genButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genButtonActionPerformed
    // Get the selected criteria
    int numQuestions = (Integer) numSpinner.getValue();
    String course = (String) courseComboBox.getSelectedItem();
    String topic = (String) topicComboBox.getSelectedItem();
    String subtopic = (String) subtopicComboBox.getSelectedItem();

    // Get selected difficulty, performance, and discrimination ranges
    float minDifficulty = (Float) jSpinner1.getValue();
    float maxDifficulty = (Float) jSpinner2.getValue();
    float minPerformance = (Float) jSpinner3.getValue();
    float maxPerformance = (Float) jSpinner4.getValue();
    float minDiscrimination = (Float) jSpinner5.getValue();
    float maxDiscrimination = (Float) jSpinner6.getValue();

    // Build the query dynamically
    StringBuilder query = new StringBuilder("SELECT * FROM questions WHERE 1=1");

    if (course != null && !course.equals(DEFAULT_ALL_OPTION)) {
        query.append(" AND course = '").append(course).append("'");
    }

    if (topic != null && !topic.equals(DEFAULT_ALL_OPTION)) {
        query.append(" AND topic = '").append(topic).append("'");
    }

    if (subtopic != null && !subtopic.equals(DEFAULT_ALL_OPTION)) {
        query.append(" AND subTopic = '").append(subtopic).append("'");
    }

    if (minDifficulty > 0.0f) {
        query.append(" AND difficulty >= ").append(minDifficulty);
    }

    if (maxDifficulty < 1.0f) {
        query.append(" AND difficulty <= ").append(maxDifficulty);
    }

    if (minPerformance > 0.0f) {
        query.append(" AND performance >= ").append(minPerformance);
    }

    if (maxPerformance < 1.0f) {
        query.append(" AND performance <= ").append(maxPerformance);
    }

    if (minDiscrimination > 0.0f) {
        query.append(" AND discrimination >= ").append(minDiscrimination);
    }

    if (maxDiscrimination < 1.0f) {
        query.append(" AND discrimination <= ").append(maxDiscrimination);
    }

    query.append(" AND questionID NOT IN (SELECT questionID FROM ExamQuestions WHERE examID = ").append(currentExamId).append(")");

    // Add random ordering to get different questions each time
    query.append(" ORDER BY RANDOM()");

    try {
        // Get questions that match the criteria
        QuestionController qController = new QuestionController();
        ResultSet matchingQuestions = qController.getQuestionsWithFilter(query.toString());

        // Add the specified number of questions to the exam
        ExamController eController = new ExamController();
        int addedCount = 0;

        while (matchingQuestions != null && matchingQuestions.next() && addedCount < numQuestions) {
            int questionId = matchingQuestions.getInt("questionID");
            eController.addQuestionToExam(currentExamId, questionId);
            addedCount++;
        }

        if (addedCount > 0) {
            JOptionPane.showMessageDialog(this,
                "Successfully added " + addedCount + " questions to the exam",
                "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this,
                "No questions matched the specified criteria",
                "Warning", JOptionPane.WARNING_MESSAGE);
        }

        this.dispose();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this,
            "Error generating questions: " + e.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_genButtonActionPerformed

    // private String buildQuery(String course, String topic, String subtopic, String difficulty) {
    //     StringBuilder query = new StringBuilder("SELECT * FROM questions WHERE 1=1");
        
    //     if (course != null && !course.equals("--All--")) {
    //         query.append(" AND course = '").append(course).append("'");
    //     }
        
    //     if (topic != null && !topic.equals("--All--")) {
    //         query.append(" AND topic = '").append(topic).append("'");
    //     }
        
    //     if (subtopic != null && !subtopic.equals("--All--")) {
    //         query.append(" AND subTopic = '").append(subtopic).append("'");
    //     }

    //     // Add random ordering to get different questions each time
    //     query.append(" ORDER BY RANDOM()");
        
    //     return query.toString();
    // }

    private void populateDropdowns() {
        // Clear the existing items in the combo boxes
        courseComboBox.removeAllItems();
        topicComboBox.removeAllItems();
        subtopicComboBox.removeAllItems();
        courseCodeToIDMap.clear();
        topicNameToIDMap.clear();
        subtopicNameToIDMap.clear();

        // Add All option
        courseComboBox.addItem(DEFAULT_ALL_OPTION);
        topicComboBox.addItem(DEFAULT_ALL_OPTION);
        subtopicComboBox.addItem(DEFAULT_ALL_OPTION);

        ArrayList<String[]> courses = cController.getAllCourses();
        
        // Add items to the combo boxes
        for (String[] course : courses) {
            String courseCode = course[0];
            int courseID = Integer.parseInt(course[1]);
            courseComboBox.addItem(courseCode);
            courseCodeToIDMap.put(courseCode, courseID);
        }
        
        // Set the default selected item to the first one
        topicComboBox.setEnabled(false);
        subtopicComboBox.setEnabled(false);
    }

    private void setupDropdownListeners() {
        courseComboBox.addActionListener(e -> {
            String selectedCourse = (String) courseComboBox.getSelectedItem();
            if (DEFAULT_ALL_OPTION.equals(selectedCourse)) {
                topicComboBox.setEnabled(false);
                subtopicComboBox.setEnabled(false);
                topicComboBox.setSelectedItem(DEFAULT_ALL_OPTION);
                subtopicComboBox.setSelectedItem(DEFAULT_ALL_OPTION);
            } else {
                Integer courseID = courseCodeToIDMap.get(selectedCourse);
                topicComboBox.setEnabled(true);
                populateTopicsDropdown(topicComboBox, courseID);
            }
        });

        topicComboBox.addActionListener(e -> {
            String selectedTopic = (String) topicComboBox.getSelectedItem();
            if (DEFAULT_ALL_OPTION.equals(selectedTopic)) {
                subtopicComboBox.setEnabled(false);
                subtopicComboBox.setSelectedItem(DEFAULT_ALL_OPTION);
            } else {
                subtopicComboBox.setEnabled(true);
                populateSubtopicsDropdown(subtopicComboBox, selectedTopic);
            }
        });
    }

    private void populateTopicsDropdown(JComboBox<String> topicDropdown, Integer course) {
        topicDropdown.removeAllItems();
        topicDropdown.addItem(DEFAULT_ALL_OPTION);

        ArrayList<String[]> topics = tController.getTopicsByCourseId(course);
        for (String[] topic : topics) {
            String topicName = topic[0];
            topicDropdown.addItem(topicName);
            topicNameToIDMap.put(topicName, Integer.parseInt(topic[1]));
        }
    }

    private void populateSubtopicsDropdown(JComboBox<String> subtopicDropdown, String topic) {
        subtopicDropdown.removeAllItems();
        subtopicDropdown.addItem(DEFAULT_ALL_OPTION);

        // Get the topicID from the topicNameToIDMap
        Integer topicID = topicNameToIDMap.get(topic);
        if (topicID == null) {
            System.err.println("Error: topicID is null for topicName: " + topic);
            return; // Exit early if topicID is null
        }

        ArrayList<String[]> subtopics = sController.getSubtopicsByTopicId(topicID);
        for (String[] subtopic : subtopics) {
            String subtopicName = subtopic[0];
            subtopicDropdown.addItem(subtopicName);
            subtopicNameToIDMap.put(subtopicName, Integer.parseInt(subtopic[1]));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerateQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerateQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerateQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerateQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GenerateQuestionForm dialog = new GenerateQuestionForm(new javax.swing.JFrame(), true, 1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel contentPane;
    private javax.swing.JComboBox<String> courseComboBox;
    private javax.swing.JLabel courseLabel;
    private javax.swing.JLabel difficultyLabel;
    private javax.swing.JButton genButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JSpinner jSpinner6;
    private javax.swing.JLabel numLabel;
    private javax.swing.JSpinner numSpinner;
    private javax.swing.JComboBox<String> subtopicComboBox;
    private javax.swing.JLabel subtopicLabel;
    private javax.swing.JComboBox<String> topicComboBox;
    private javax.swing.JLabel topicLabel;
    // End of variables declaration//GEN-END:variables
}
